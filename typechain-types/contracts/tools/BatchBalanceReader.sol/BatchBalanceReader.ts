/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface BatchBalanceReaderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "balancesOf"
      | "balancesOfByPartition"
      | "canImplementInterfaceForAddress"
      | "totalSupplies"
      | "totalSuppliesByPartition"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balancesOf",
    values: [AddressLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "balancesOfByPartition",
    values: [AddressLike[], AddressLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "canImplementInterfaceForAddress",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplies",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSuppliesByPartition",
    values: [BytesLike[], AddressLike[]]
  ): string;

  decodeFunctionResult(functionFragment: "balancesOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balancesOfByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canImplementInterfaceForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSuppliesByPartition",
    data: BytesLike
  ): Result;
}

export interface BatchBalanceReader extends BaseContract {
  connect(runner?: ContractRunner | null): BatchBalanceReader;
  waitForDeployment(): Promise<this>;

  interface: BatchBalanceReaderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balancesOf: TypedContractMethod<
    [tokenHolders: AddressLike[], tokenAddresses: AddressLike[]],
    [bigint[]],
    "view"
  >;

  balancesOfByPartition: TypedContractMethod<
    [
      tokenHolders: AddressLike[],
      tokenAddresses: AddressLike[],
      partitions: BytesLike[]
    ],
    [bigint[]],
    "view"
  >;

  canImplementInterfaceForAddress: TypedContractMethod<
    [interfaceHash: BytesLike, arg1: AddressLike],
    [string],
    "view"
  >;

  totalSupplies: TypedContractMethod<
    [tokenAddresses: AddressLike[]],
    [bigint[]],
    "view"
  >;

  totalSuppliesByPartition: TypedContractMethod<
    [partitions: BytesLike[], tokenAddresses: AddressLike[]],
    [bigint[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balancesOf"
  ): TypedContractMethod<
    [tokenHolders: AddressLike[], tokenAddresses: AddressLike[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "balancesOfByPartition"
  ): TypedContractMethod<
    [
      tokenHolders: AddressLike[],
      tokenAddresses: AddressLike[],
      partitions: BytesLike[]
    ],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "canImplementInterfaceForAddress"
  ): TypedContractMethod<
    [interfaceHash: BytesLike, arg1: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalSupplies"
  ): TypedContractMethod<[tokenAddresses: AddressLike[]], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "totalSuppliesByPartition"
  ): TypedContractMethod<
    [partitions: BytesLike[], tokenAddresses: AddressLike[]],
    [bigint[]],
    "view"
  >;

  filters: {};
}
