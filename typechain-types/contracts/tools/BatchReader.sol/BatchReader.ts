/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface BatchReaderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchAllowlisted"
      | "batchBalanceOf"
      | "batchBalanceOfByPartition"
      | "batchBlocklisted"
      | "batchControllers"
      | "batchDefaultPartitions"
      | "batchERC1400Balances"
      | "batchERC20Balances"
      | "batchERC721Balances"
      | "batchEthBalance"
      | "batchExtensionControllers"
      | "batchSpendableBalanceOfByPartition"
      | "batchTokenExtensionSetup"
      | "batchTokenExtensionSetup1"
      | "batchTokenExtensionSetup2"
      | "batchTokenRolesInfos"
      | "batchTokenSuppliesInfos"
      | "batchTotalPartitions"
      | "batchValidations"
      | "canImplementInterfaceForAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchAllowlisted",
    values: [AddressLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchBalanceOf",
    values: [AddressLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchBalanceOfByPartition",
    values: [AddressLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchBlocklisted",
    values: [AddressLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchControllers",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchDefaultPartitions",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchERC1400Balances",
    values: [AddressLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchERC20Balances",
    values: [AddressLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchERC721Balances",
    values: [AddressLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchEthBalance",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchExtensionControllers",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSpendableBalanceOfByPartition",
    values: [AddressLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTokenExtensionSetup",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTokenExtensionSetup1",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTokenExtensionSetup2",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTokenRolesInfos",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTokenSuppliesInfos",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTotalPartitions",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchValidations",
    values: [AddressLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "canImplementInterfaceForAddress",
    values: [BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchAllowlisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchBalanceOfByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchBlocklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchDefaultPartitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchERC1400Balances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchERC20Balances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchERC721Balances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchEthBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchExtensionControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSpendableBalanceOfByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTokenExtensionSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTokenExtensionSetup1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTokenExtensionSetup2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTokenRolesInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTokenSuppliesInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTotalPartitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchValidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canImplementInterfaceForAddress",
    data: BytesLike
  ): Result;
}

export interface BatchReader extends BaseContract {
  connect(runner?: ContractRunner | null): BatchReader;
  waitForDeployment(): Promise<this>;

  interface: BatchReaderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchAllowlisted: TypedContractMethod<
    [tokens: AddressLike[], tokenHolders: AddressLike[]],
    [boolean[]],
    "view"
  >;

  batchBalanceOf: TypedContractMethod<
    [tokens: AddressLike[], tokenHolders: AddressLike[]],
    [bigint[]],
    "view"
  >;

  batchBalanceOfByPartition: TypedContractMethod<
    [tokens: AddressLike[], tokenHolders: AddressLike[]],
    [[bigint[], string[], bigint[]]],
    "view"
  >;

  batchBlocklisted: TypedContractMethod<
    [tokens: AddressLike[], tokenHolders: AddressLike[]],
    [boolean[]],
    "view"
  >;

  batchControllers: TypedContractMethod<
    [tokens: AddressLike[]],
    [[bigint[], string[]]],
    "view"
  >;

  batchDefaultPartitions: TypedContractMethod<
    [tokens: AddressLike[]],
    [[bigint[], string[]]],
    "view"
  >;

  batchERC1400Balances: TypedContractMethod<
    [tokens: AddressLike[], tokenHolders: AddressLike[]],
    [[bigint[], bigint[], bigint[], string[], bigint[], bigint[]]],
    "view"
  >;

  batchERC20Balances: TypedContractMethod<
    [tokens: AddressLike[], tokenHolders: AddressLike[]],
    [[bigint[], bigint[]]],
    "view"
  >;

  batchERC721Balances: TypedContractMethod<
    [tokens: AddressLike[], tokenHolders: AddressLike[]],
    [[bigint[], bigint[][][]]],
    "view"
  >;

  batchEthBalance: TypedContractMethod<
    [tokenHolders: AddressLike[]],
    [bigint[]],
    "view"
  >;

  batchExtensionControllers: TypedContractMethod<
    [tokens: AddressLike[]],
    [[bigint[], string[]]],
    "view"
  >;

  batchSpendableBalanceOfByPartition: TypedContractMethod<
    [tokens: AddressLike[], tokenHolders: AddressLike[]],
    [[bigint[], string[], bigint[]]],
    "view"
  >;

  batchTokenExtensionSetup: TypedContractMethod<
    [tokens: AddressLike[]],
    [[string[], bigint[], boolean[], boolean[], boolean[], boolean[]]],
    "view"
  >;

  batchTokenExtensionSetup1: TypedContractMethod<
    [tokens: AddressLike[]],
    [[string[], bigint[], boolean[], boolean[]]],
    "view"
  >;

  batchTokenExtensionSetup2: TypedContractMethod<
    [tokens: AddressLike[]],
    [[boolean[], boolean[]]],
    "view"
  >;

  batchTokenRolesInfos: TypedContractMethod<
    [tokens: AddressLike[]],
    [[string[], bigint[], string[], bigint[], string[]]],
    "view"
  >;

  batchTokenSuppliesInfos: TypedContractMethod<
    [tokens: AddressLike[]],
    [[bigint[], bigint[], string[], bigint[], bigint[], string[]]],
    "view"
  >;

  batchTotalPartitions: TypedContractMethod<
    [tokens: AddressLike[]],
    [[bigint[], string[], bigint[]]],
    "view"
  >;

  batchValidations: TypedContractMethod<
    [tokens: AddressLike[], tokenHolders: AddressLike[]],
    [[boolean[], boolean[]]],
    "view"
  >;

  canImplementInterfaceForAddress: TypedContractMethod<
    [interfaceHash: BytesLike, arg1: AddressLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchAllowlisted"
  ): TypedContractMethod<
    [tokens: AddressLike[], tokenHolders: AddressLike[]],
    [boolean[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchBalanceOf"
  ): TypedContractMethod<
    [tokens: AddressLike[], tokenHolders: AddressLike[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchBalanceOfByPartition"
  ): TypedContractMethod<
    [tokens: AddressLike[], tokenHolders: AddressLike[]],
    [[bigint[], string[], bigint[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchBlocklisted"
  ): TypedContractMethod<
    [tokens: AddressLike[], tokenHolders: AddressLike[]],
    [boolean[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchControllers"
  ): TypedContractMethod<
    [tokens: AddressLike[]],
    [[bigint[], string[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchDefaultPartitions"
  ): TypedContractMethod<
    [tokens: AddressLike[]],
    [[bigint[], string[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchERC1400Balances"
  ): TypedContractMethod<
    [tokens: AddressLike[], tokenHolders: AddressLike[]],
    [[bigint[], bigint[], bigint[], string[], bigint[], bigint[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchERC20Balances"
  ): TypedContractMethod<
    [tokens: AddressLike[], tokenHolders: AddressLike[]],
    [[bigint[], bigint[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchERC721Balances"
  ): TypedContractMethod<
    [tokens: AddressLike[], tokenHolders: AddressLike[]],
    [[bigint[], bigint[][][]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchEthBalance"
  ): TypedContractMethod<[tokenHolders: AddressLike[]], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "batchExtensionControllers"
  ): TypedContractMethod<
    [tokens: AddressLike[]],
    [[bigint[], string[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchSpendableBalanceOfByPartition"
  ): TypedContractMethod<
    [tokens: AddressLike[], tokenHolders: AddressLike[]],
    [[bigint[], string[], bigint[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchTokenExtensionSetup"
  ): TypedContractMethod<
    [tokens: AddressLike[]],
    [[string[], bigint[], boolean[], boolean[], boolean[], boolean[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchTokenExtensionSetup1"
  ): TypedContractMethod<
    [tokens: AddressLike[]],
    [[string[], bigint[], boolean[], boolean[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchTokenExtensionSetup2"
  ): TypedContractMethod<
    [tokens: AddressLike[]],
    [[boolean[], boolean[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchTokenRolesInfos"
  ): TypedContractMethod<
    [tokens: AddressLike[]],
    [[string[], bigint[], string[], bigint[], string[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchTokenSuppliesInfos"
  ): TypedContractMethod<
    [tokens: AddressLike[]],
    [[bigint[], bigint[], string[], bigint[], bigint[], string[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchTotalPartitions"
  ): TypedContractMethod<
    [tokens: AddressLike[]],
    [[bigint[], string[], bigint[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchValidations"
  ): TypedContractMethod<
    [tokens: AddressLike[], tokenHolders: AddressLike[]],
    [[boolean[], boolean[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "canImplementInterfaceForAddress"
  ): TypedContractMethod<
    [interfaceHash: BytesLike, arg1: AddressLike],
    [string],
    "view"
  >;

  filters: {};
}
