/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Swaps {
  export type UserTradeDataStruct = {
    tokenAddress: AddressLike;
    tokenValue: BigNumberish;
    tokenId: BytesLike;
    tokenStandard: BigNumberish;
    accepted: boolean;
    approved: boolean;
    tradeType: BigNumberish;
  };

  export type UserTradeDataStructOutput = [
    tokenAddress: string,
    tokenValue: bigint,
    tokenId: string,
    tokenStandard: bigint,
    accepted: boolean,
    approved: boolean,
    tradeType: bigint
  ] & {
    tokenAddress: string;
    tokenValue: bigint;
    tokenId: string;
    tokenStandard: bigint;
    accepted: boolean;
    approved: boolean;
    tradeType: bigint;
  };

  export type TradeStruct = {
    holder1: AddressLike;
    holder2: AddressLike;
    executer: AddressLike;
    expirationDate: BigNumberish;
    settlementDate: BigNumberish;
    userTradeData1: Swaps.UserTradeDataStruct;
    userTradeData2: Swaps.UserTradeDataStruct;
    state: BigNumberish;
  };

  export type TradeStructOutput = [
    holder1: string,
    holder2: string,
    executer: string,
    expirationDate: bigint,
    settlementDate: bigint,
    userTradeData1: Swaps.UserTradeDataStructOutput,
    userTradeData2: Swaps.UserTradeDataStructOutput,
    state: bigint
  ] & {
    holder1: string;
    holder2: string;
    executer: string;
    expirationDate: bigint;
    settlementDate: bigint;
    userTradeData1: Swaps.UserTradeDataStructOutput;
    userTradeData2: Swaps.UserTradeDataStructOutput;
    state: bigint;
  };

  export type TradeRequestInputStruct = {
    holder1: AddressLike;
    holder2: AddressLike;
    executer: AddressLike;
    expirationDate: BigNumberish;
    tokenAddress1: AddressLike;
    tokenValue1: BigNumberish;
    tokenId1: BytesLike;
    tokenStandard1: BigNumberish;
    tokenAddress2: AddressLike;
    tokenValue2: BigNumberish;
    tokenId2: BytesLike;
    tokenStandard2: BigNumberish;
    tradeType1: BigNumberish;
    tradeType2: BigNumberish;
    settlementDate: BigNumberish;
  };

  export type TradeRequestInputStructOutput = [
    holder1: string,
    holder2: string,
    executer: string,
    expirationDate: bigint,
    tokenAddress1: string,
    tokenValue1: bigint,
    tokenId1: string,
    tokenStandard1: bigint,
    tokenAddress2: string,
    tokenValue2: bigint,
    tokenId2: string,
    tokenStandard2: bigint,
    tradeType1: bigint,
    tradeType2: bigint,
    settlementDate: bigint
  ] & {
    holder1: string;
    holder2: string;
    executer: string;
    expirationDate: bigint;
    tokenAddress1: string;
    tokenValue1: bigint;
    tokenId1: string;
    tokenStandard1: bigint;
    tokenAddress2: string;
    tokenValue2: bigint;
    tokenId2: string;
    tokenStandard2: bigint;
    tradeType1: bigint;
    tradeType2: bigint;
    settlementDate: bigint;
  };
}

export interface SwapsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptTrade"
      | "approveTrade"
      | "approveTradeWithPreimage"
      | "canImplementInterfaceForAddress"
      | "canReceive"
      | "cancelTrade"
      | "executeTrade"
      | "executeTradeWithPreimage"
      | "forceTrade"
      | "forceTradeWithPreimage"
      | "getNbTrades"
      | "getPrice"
      | "getPriceOwnership"
      | "getTokenPrice"
      | "getTrade"
      | "getTradeAcceptanceStatus"
      | "getTradeApprovalStatus"
      | "owner"
      | "priceOracles"
      | "renounceOwnership"
      | "requestTrade"
      | "setPriceOracles"
      | "setPriceOwnership"
      | "setTokenControllers"
      | "setTokenPrice"
      | "setTradeExecuters"
      | "setVariablePriceStartDate"
      | "tokenControllers"
      | "tokensReceived"
      | "tradeExecuters"
      | "transferOwnership"
      | "variablePriceStartDate"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CreateNote"
      | "DestroyNote"
      | "ExecutedHold"
      | "OwnershipTransferred"
      | "Transfer"
      | "TransferByPartition"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptTrade",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveTrade",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "approveTradeWithPreimage",
    values: [BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canImplementInterfaceForAddress",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canReceive",
    values: [
      BytesLike,
      BytesLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTradeWithPreimage",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forceTrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceTradeWithPreimage",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNbTrades",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceOwnership",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPrice",
    values: [AddressLike, AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeAcceptanceStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeApprovalStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceOracles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestTrade",
    values: [Swaps.TradeRequestInputStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOracles",
    values: [AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOwnership",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenControllers",
    values: [AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenPrice",
    values: [AddressLike, AddressLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTradeExecuters",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setVariablePriceStartDate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenControllers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensReceived",
    values: [
      BytesLike,
      BytesLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeExecuters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "variablePriceStartDate",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveTradeWithPreimage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canImplementInterfaceForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canReceive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTradeWithPreimage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "forceTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceTradeWithPreimage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNbTrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTradeAcceptanceStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeApprovalStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTradeExecuters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVariablePriceStartDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeExecuters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "variablePriceStartDate",
    data: BytesLike
  ): Result;
}

export namespace CreateNoteEvent {
  export type InputTuple = [
    owner: AddressLike,
    noteHash: BytesLike,
    metadata: BytesLike
  ];
  export type OutputTuple = [owner: string, noteHash: string, metadata: string];
  export interface OutputObject {
    owner: string;
    noteHash: string;
    metadata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DestroyNoteEvent {
  export type InputTuple = [owner: AddressLike, noteHash: BytesLike];
  export type OutputTuple = [owner: string, noteHash: string];
  export interface OutputObject {
    owner: string;
    noteHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutedHoldEvent {
  export type InputTuple = [
    token: AddressLike,
    holdId: BytesLike,
    lockPreimage: BytesLike,
    recipient: AddressLike
  ];
  export type OutputTuple = [
    token: string,
    holdId: string,
    lockPreimage: string,
    recipient: string
  ];
  export interface OutputObject {
    token: string;
    holdId: string;
    lockPreimage: string;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokens: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokens: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferByPartitionEvent {
  export type InputTuple = [
    fromPartition: BytesLike,
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike
  ];
  export type OutputTuple = [
    fromPartition: string,
    operator: string,
    from: string,
    to: string,
    value: bigint,
    data: string,
    operatorData: string
  ];
  export interface OutputObject {
    fromPartition: string;
    operator: string;
    from: string;
    to: string;
    value: bigint;
    data: string;
    operatorData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Swaps extends BaseContract {
  connect(runner?: ContractRunner | null): Swaps;
  waitForDeployment(): Promise<this>;

  interface: SwapsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptTrade: TypedContractMethod<
    [index: BigNumberish, preimage: BytesLike],
    [void],
    "payable"
  >;

  approveTrade: TypedContractMethod<
    [index: BigNumberish, approved: boolean],
    [void],
    "nonpayable"
  >;

  approveTradeWithPreimage: TypedContractMethod<
    [index: BigNumberish, approved: boolean, preimage: BytesLike],
    [void],
    "nonpayable"
  >;

  canImplementInterfaceForAddress: TypedContractMethod<
    [interfaceHash: BytesLike, arg1: AddressLike],
    [string],
    "view"
  >;

  canReceive: TypedContractMethod<
    [
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: AddressLike,
      arg3: AddressLike,
      arg4: AddressLike,
      arg5: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike
    ],
    [boolean],
    "view"
  >;

  cancelTrade: TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;

  executeTrade: TypedContractMethod<
    [index: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeTradeWithPreimage: TypedContractMethod<
    [index: BigNumberish, preimage: BytesLike],
    [void],
    "nonpayable"
  >;

  forceTrade: TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;

  forceTradeWithPreimage: TypedContractMethod<
    [index: BigNumberish, preimage: BytesLike],
    [void],
    "nonpayable"
  >;

  getNbTrades: TypedContractMethod<[], [bigint], "view">;

  getPrice: TypedContractMethod<[index: BigNumberish], [bigint], "view">;

  getPriceOwnership: TypedContractMethod<
    [tokenAddress1: AddressLike, tokenAddress2: AddressLike],
    [boolean],
    "view"
  >;

  getTokenPrice: TypedContractMethod<
    [
      tokenAddress1: AddressLike,
      tokenAddress2: AddressLike,
      tokenId1: BytesLike,
      tokenId2: BytesLike
    ],
    [bigint],
    "view"
  >;

  getTrade: TypedContractMethod<
    [index: BigNumberish],
    [Swaps.TradeStructOutput],
    "view"
  >;

  getTradeAcceptanceStatus: TypedContractMethod<
    [index: BigNumberish],
    [boolean],
    "view"
  >;

  getTradeApprovalStatus: TypedContractMethod<
    [index: BigNumberish],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  priceOracles: TypedContractMethod<
    [tokenAddress: AddressLike],
    [string[]],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestTrade: TypedContractMethod<
    [inputData: Swaps.TradeRequestInputStruct, preimage: BytesLike],
    [void],
    "payable"
  >;

  setPriceOracles: TypedContractMethod<
    [tokenAddress: AddressLike, oracles: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setPriceOwnership: TypedContractMethod<
    [
      tokenAddress1: AddressLike,
      tokenAddress2: AddressLike,
      priceOwnership: boolean
    ],
    [void],
    "nonpayable"
  >;

  setTokenControllers: TypedContractMethod<
    [tokenAddress: AddressLike, operators: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setTokenPrice: TypedContractMethod<
    [
      tokenAddress1: AddressLike,
      tokenAddress2: AddressLike,
      tokenId1: BytesLike,
      tokenId2: BytesLike,
      newPrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setTradeExecuters: TypedContractMethod<
    [operators: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setVariablePriceStartDate: TypedContractMethod<
    [tokenAddress: AddressLike, startDate: BigNumberish],
    [void],
    "nonpayable"
  >;

  tokenControllers: TypedContractMethod<
    [tokenAddress: AddressLike],
    [string[]],
    "view"
  >;

  tokensReceived: TypedContractMethod<
    [
      arg0: BytesLike,
      partition: BytesLike,
      arg2: AddressLike,
      from: AddressLike,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  tradeExecuters: TypedContractMethod<[], [string[]], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  variablePriceStartDate: TypedContractMethod<
    [tokenAddress: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptTrade"
  ): TypedContractMethod<
    [index: BigNumberish, preimage: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "approveTrade"
  ): TypedContractMethod<
    [index: BigNumberish, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveTradeWithPreimage"
  ): TypedContractMethod<
    [index: BigNumberish, approved: boolean, preimage: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canImplementInterfaceForAddress"
  ): TypedContractMethod<
    [interfaceHash: BytesLike, arg1: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "canReceive"
  ): TypedContractMethod<
    [
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: AddressLike,
      arg3: AddressLike,
      arg4: AddressLike,
      arg5: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelTrade"
  ): TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeTrade"
  ): TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeTradeWithPreimage"
  ): TypedContractMethod<
    [index: BigNumberish, preimage: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "forceTrade"
  ): TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "forceTradeWithPreimage"
  ): TypedContractMethod<
    [index: BigNumberish, preimage: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getNbTrades"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<[index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPriceOwnership"
  ): TypedContractMethod<
    [tokenAddress1: AddressLike, tokenAddress2: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenPrice"
  ): TypedContractMethod<
    [
      tokenAddress1: AddressLike,
      tokenAddress2: AddressLike,
      tokenId1: BytesLike,
      tokenId2: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTrade"
  ): TypedContractMethod<
    [index: BigNumberish],
    [Swaps.TradeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTradeAcceptanceStatus"
  ): TypedContractMethod<[index: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "getTradeApprovalStatus"
  ): TypedContractMethod<[index: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceOracles"
  ): TypedContractMethod<[tokenAddress: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestTrade"
  ): TypedContractMethod<
    [inputData: Swaps.TradeRequestInputStruct, preimage: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setPriceOracles"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, oracles: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPriceOwnership"
  ): TypedContractMethod<
    [
      tokenAddress1: AddressLike,
      tokenAddress2: AddressLike,
      priceOwnership: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenControllers"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, operators: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenPrice"
  ): TypedContractMethod<
    [
      tokenAddress1: AddressLike,
      tokenAddress2: AddressLike,
      tokenId1: BytesLike,
      tokenId2: BytesLike,
      newPrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTradeExecuters"
  ): TypedContractMethod<[operators: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVariablePriceStartDate"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, startDate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenControllers"
  ): TypedContractMethod<[tokenAddress: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "tokensReceived"
  ): TypedContractMethod<
    [
      arg0: BytesLike,
      partition: BytesLike,
      arg2: AddressLike,
      from: AddressLike,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tradeExecuters"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "variablePriceStartDate"
  ): TypedContractMethod<[tokenAddress: AddressLike], [bigint], "view">;

  getEvent(
    key: "CreateNote"
  ): TypedContractEvent<
    CreateNoteEvent.InputTuple,
    CreateNoteEvent.OutputTuple,
    CreateNoteEvent.OutputObject
  >;
  getEvent(
    key: "DestroyNote"
  ): TypedContractEvent<
    DestroyNoteEvent.InputTuple,
    DestroyNoteEvent.OutputTuple,
    DestroyNoteEvent.OutputObject
  >;
  getEvent(
    key: "ExecutedHold"
  ): TypedContractEvent<
    ExecutedHoldEvent.InputTuple,
    ExecutedHoldEvent.OutputTuple,
    ExecutedHoldEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TransferByPartition"
  ): TypedContractEvent<
    TransferByPartitionEvent.InputTuple,
    TransferByPartitionEvent.OutputTuple,
    TransferByPartitionEvent.OutputObject
  >;

  filters: {
    "CreateNote(address,bytes32,bytes)": TypedContractEvent<
      CreateNoteEvent.InputTuple,
      CreateNoteEvent.OutputTuple,
      CreateNoteEvent.OutputObject
    >;
    CreateNote: TypedContractEvent<
      CreateNoteEvent.InputTuple,
      CreateNoteEvent.OutputTuple,
      CreateNoteEvent.OutputObject
    >;

    "DestroyNote(address,bytes32)": TypedContractEvent<
      DestroyNoteEvent.InputTuple,
      DestroyNoteEvent.OutputTuple,
      DestroyNoteEvent.OutputObject
    >;
    DestroyNote: TypedContractEvent<
      DestroyNoteEvent.InputTuple,
      DestroyNoteEvent.OutputTuple,
      DestroyNoteEvent.OutputObject
    >;

    "ExecutedHold(address,bytes32,bytes32,address)": TypedContractEvent<
      ExecutedHoldEvent.InputTuple,
      ExecutedHoldEvent.OutputTuple,
      ExecutedHoldEvent.OutputObject
    >;
    ExecutedHold: TypedContractEvent<
      ExecutedHoldEvent.InputTuple,
      ExecutedHoldEvent.OutputTuple,
      ExecutedHoldEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TransferByPartition(bytes32,address,address,address,uint256,bytes,bytes)": TypedContractEvent<
      TransferByPartitionEvent.InputTuple,
      TransferByPartitionEvent.OutputTuple,
      TransferByPartitionEvent.OutputObject
    >;
    TransferByPartition: TypedContractEvent<
      TransferByPartitionEvent.InputTuple,
      TransferByPartitionEvent.OutputTuple,
      TransferByPartitionEvent.OutputObject
    >;
  };
}
