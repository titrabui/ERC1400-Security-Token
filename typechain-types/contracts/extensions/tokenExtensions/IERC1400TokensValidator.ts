/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IERC1400TokensValidator {
  export type ValidateDataStruct = {
    token: AddressLike;
    payload: BytesLike;
    partition: BytesLike;
    operator: AddressLike;
    from: AddressLike;
    to: AddressLike;
    value: BigNumberish;
    data: BytesLike;
    operatorData: BytesLike;
  };

  export type ValidateDataStructOutput = [
    token: string,
    payload: string,
    partition: string,
    operator: string,
    from: string,
    to: string,
    value: bigint,
    data: string,
    operatorData: string
  ] & {
    token: string;
    payload: string;
    partition: string;
    operator: string;
    from: string;
    to: string;
    value: bigint;
    data: string;
    operatorData: string;
  };
}

export interface IERC1400TokensValidatorInterface extends Interface {
  getFunction(
    nameOrSignature: "canValidate" | "tokensToValidate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canValidate",
    values: [IERC1400TokensValidator.ValidateDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensToValidate",
    values: [
      BytesLike,
      BytesLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "canValidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensToValidate",
    data: BytesLike
  ): Result;
}

export interface IERC1400TokensValidator extends BaseContract {
  connect(runner?: ContractRunner | null): IERC1400TokensValidator;
  waitForDeployment(): Promise<this>;

  interface: IERC1400TokensValidatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  canValidate: TypedContractMethod<
    [data: IERC1400TokensValidator.ValidateDataStruct],
    [boolean],
    "view"
  >;

  tokensToValidate: TypedContractMethod<
    [
      payload: BytesLike,
      partition: BytesLike,
      operator: AddressLike,
      from: AddressLike,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "canValidate"
  ): TypedContractMethod<
    [data: IERC1400TokensValidator.ValidateDataStruct],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokensToValidate"
  ): TypedContractMethod<
    [
      payload: BytesLike,
      partition: BytesLike,
      operator: AddressLike,
      from: AddressLike,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
