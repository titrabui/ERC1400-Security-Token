/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IERC1400TokensValidator {
  export type ValidateDataStruct = {
    token: AddressLike;
    payload: BytesLike;
    partition: BytesLike;
    operator: AddressLike;
    from: AddressLike;
    to: AddressLike;
    value: BigNumberish;
    data: BytesLike;
    operatorData: BytesLike;
  };

  export type ValidateDataStructOutput = [
    token: string,
    payload: string,
    partition: string,
    operator: string,
    from: string,
    to: string,
    value: bigint,
    data: string,
    operatorData: string
  ] & {
    token: string;
    payload: string;
    partition: string;
    operator: string;
    from: string;
    to: string;
    value: bigint;
    data: string;
    operatorData: string;
  };
}

export interface ERC1400TokensValidatorMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAllowlistAdmin"
      | "addAllowlisted"
      | "addBlocklistAdmin"
      | "addBlocklisted"
      | "addCertificateSigner"
      | "addPauser"
      | "balanceOnHold"
      | "balanceOnHoldByPartition"
      | "canImplementInterfaceForAddress"
      | "canValidate"
      | "executeHold"
      | "executeHoldAndKeepOpen"
      | "granularityByPartition"
      | "hold"
      | "holdFrom"
      | "holdFromWithExpirationDate"
      | "holdWithExpirationDate"
      | "isAllowlistAdmin"
      | "isAllowlisted"
      | "isBlocklistAdmin"
      | "isBlocklisted"
      | "isCertificateSigner"
      | "isPauser"
      | "pause"
      | "paused"
      | "preHoldFor"
      | "preHoldForWithExpirationDate"
      | "registerTokenSetup"
      | "releaseHold"
      | "removeAllowlistAdmin"
      | "removeAllowlisted"
      | "removeBlocklistAdmin"
      | "removeBlocklisted"
      | "removeCertificateSigner"
      | "removePauser"
      | "renewHold"
      | "renewHoldWithExpirationDate"
      | "renounceAllowlistAdmin"
      | "renounceBlocklistAdmin"
      | "renounceCertificateSigner"
      | "renounceMinter"
      | "renouncePauser"
      | "retrieveHoldData"
      | "retrieveTokenSetup"
      | "setGranularityByPartition"
      | "spendableBalanceOf"
      | "spendableBalanceOfByPartition"
      | "tokensToValidate"
      | "totalSupplyOnHold"
      | "totalSupplyOnHoldByPartition"
      | "unpause"
      | "usedCertificateNonce"
      | "usedCertificateSalt"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AllowlistAdminAdded"
      | "AllowlistAdminRemoved"
      | "AllowlistedAdded"
      | "AllowlistedRemoved"
      | "BlocklistAdminAdded"
      | "BlocklistAdminRemoved"
      | "BlocklistedAdded"
      | "BlocklistedRemoved"
      | "CertificateSignerAdded"
      | "CertificateSignerRemoved"
      | "HoldCreated"
      | "HoldExecuted"
      | "HoldExecutedAndKeptOpen"
      | "HoldReleased"
      | "HoldRenewed"
      | "Paused"
      | "PauserAdded"
      | "PauserRemoved"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAllowlistAdmin",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addAllowlisted",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addBlocklistAdmin",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addBlocklisted",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addCertificateSigner",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addPauser",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOnHold",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOnHoldByPartition",
    values: [AddressLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canImplementInterfaceForAddress",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canValidate",
    values: [IERC1400TokensValidator.ValidateDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "executeHold",
    values: [AddressLike, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeHoldAndKeepOpen",
    values: [AddressLike, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "granularityByPartition",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hold",
    values: [
      AddressLike,
      BytesLike,
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "holdFrom",
    values: [
      AddressLike,
      BytesLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "holdFromWithExpirationDate",
    values: [
      AddressLike,
      BytesLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "holdWithExpirationDate",
    values: [
      AddressLike,
      BytesLike,
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowlistAdmin",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowlisted",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlocklistAdmin",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlocklisted",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCertificateSigner",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPauser",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "paused", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "preHoldFor",
    values: [
      AddressLike,
      BytesLike,
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "preHoldForWithExpirationDate",
    values: [
      AddressLike,
      BytesLike,
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTokenSetup",
    values: [
      AddressLike,
      BigNumberish,
      boolean,
      boolean,
      boolean,
      boolean,
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseHold",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllowlistAdmin",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllowlisted",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBlocklistAdmin",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBlocklisted",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCertificateSigner",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removePauser",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renewHold",
    values: [AddressLike, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renewHoldWithExpirationDate",
    values: [AddressLike, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAllowlistAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceBlocklistAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceCertificateSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renouncePauser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveHoldData",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveTokenSetup",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGranularityByPartition",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "spendableBalanceOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "spendableBalanceOfByPartition",
    values: [AddressLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensToValidate",
    values: [
      BytesLike,
      BytesLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyOnHold",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyOnHoldByPartition",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unpause",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usedCertificateNonce",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usedCertificateSalt",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAllowlistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAllowlisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBlocklistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBlocklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCertificateSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOnHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOnHoldByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canImplementInterfaceForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canValidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHoldAndKeepOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "granularityByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "holdFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "holdFromWithExpirationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "holdWithExpirationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowlistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowlisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlocklistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlocklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCertificateSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPauser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "preHoldFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "preHoldForWithExpirationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTokenSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAllowlistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAllowlisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBlocklistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBlocklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCertificateSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renewHold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renewHoldWithExpirationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceAllowlistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceBlocklistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceCertificateSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renouncePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveHoldData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveTokenSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGranularityByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spendableBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spendableBalanceOfByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensToValidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyOnHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyOnHoldByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usedCertificateNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedCertificateSalt",
    data: BytesLike
  ): Result;
}

export namespace AllowlistAdminAddedEvent {
  export type InputTuple = [token: AddressLike, account: AddressLike];
  export type OutputTuple = [token: string, account: string];
  export interface OutputObject {
    token: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AllowlistAdminRemovedEvent {
  export type InputTuple = [token: AddressLike, account: AddressLike];
  export type OutputTuple = [token: string, account: string];
  export interface OutputObject {
    token: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AllowlistedAddedEvent {
  export type InputTuple = [token: AddressLike, account: AddressLike];
  export type OutputTuple = [token: string, account: string];
  export interface OutputObject {
    token: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AllowlistedRemovedEvent {
  export type InputTuple = [token: AddressLike, account: AddressLike];
  export type OutputTuple = [token: string, account: string];
  export interface OutputObject {
    token: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlocklistAdminAddedEvent {
  export type InputTuple = [token: AddressLike, account: AddressLike];
  export type OutputTuple = [token: string, account: string];
  export interface OutputObject {
    token: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlocklistAdminRemovedEvent {
  export type InputTuple = [token: AddressLike, account: AddressLike];
  export type OutputTuple = [token: string, account: string];
  export interface OutputObject {
    token: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlocklistedAddedEvent {
  export type InputTuple = [token: AddressLike, account: AddressLike];
  export type OutputTuple = [token: string, account: string];
  export interface OutputObject {
    token: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlocklistedRemovedEvent {
  export type InputTuple = [token: AddressLike, account: AddressLike];
  export type OutputTuple = [token: string, account: string];
  export interface OutputObject {
    token: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CertificateSignerAddedEvent {
  export type InputTuple = [token: AddressLike, account: AddressLike];
  export type OutputTuple = [token: string, account: string];
  export interface OutputObject {
    token: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CertificateSignerRemovedEvent {
  export type InputTuple = [token: AddressLike, account: AddressLike];
  export type OutputTuple = [token: string, account: string];
  export interface OutputObject {
    token: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HoldCreatedEvent {
  export type InputTuple = [
    token: AddressLike,
    holdId: BytesLike,
    partition: BytesLike,
    sender: AddressLike,
    recipient: AddressLike,
    notary: AddressLike,
    value: BigNumberish,
    expiration: BigNumberish,
    secretHash: BytesLike
  ];
  export type OutputTuple = [
    token: string,
    holdId: string,
    partition: string,
    sender: string,
    recipient: string,
    notary: string,
    value: bigint,
    expiration: bigint,
    secretHash: string
  ];
  export interface OutputObject {
    token: string;
    holdId: string;
    partition: string;
    sender: string;
    recipient: string;
    notary: string;
    value: bigint;
    expiration: bigint;
    secretHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HoldExecutedEvent {
  export type InputTuple = [
    token: AddressLike,
    holdId: BytesLike,
    notary: AddressLike,
    heldValue: BigNumberish,
    transferredValue: BigNumberish,
    secret: BytesLike
  ];
  export type OutputTuple = [
    token: string,
    holdId: string,
    notary: string,
    heldValue: bigint,
    transferredValue: bigint,
    secret: string
  ];
  export interface OutputObject {
    token: string;
    holdId: string;
    notary: string;
    heldValue: bigint;
    transferredValue: bigint;
    secret: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HoldExecutedAndKeptOpenEvent {
  export type InputTuple = [
    token: AddressLike,
    holdId: BytesLike,
    notary: AddressLike,
    heldValue: BigNumberish,
    transferredValue: BigNumberish,
    secret: BytesLike
  ];
  export type OutputTuple = [
    token: string,
    holdId: string,
    notary: string,
    heldValue: bigint,
    transferredValue: bigint,
    secret: string
  ];
  export interface OutputObject {
    token: string;
    holdId: string;
    notary: string;
    heldValue: bigint;
    transferredValue: bigint;
    secret: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HoldReleasedEvent {
  export type InputTuple = [
    token: AddressLike,
    holdId: BytesLike,
    notary: AddressLike,
    status: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    holdId: string,
    notary: string,
    status: bigint
  ];
  export interface OutputObject {
    token: string;
    holdId: string;
    notary: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HoldRenewedEvent {
  export type InputTuple = [
    token: AddressLike,
    holdId: BytesLike,
    notary: AddressLike,
    oldExpiration: BigNumberish,
    newExpiration: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    holdId: string,
    notary: string,
    oldExpiration: bigint,
    newExpiration: bigint
  ];
  export interface OutputObject {
    token: string;
    holdId: string;
    notary: string;
    oldExpiration: bigint;
    newExpiration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [token: AddressLike, account: AddressLike];
  export type OutputTuple = [token: string, account: string];
  export interface OutputObject {
    token: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauserAddedEvent {
  export type InputTuple = [token: AddressLike, account: AddressLike];
  export type OutputTuple = [token: string, account: string];
  export interface OutputObject {
    token: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauserRemovedEvent {
  export type InputTuple = [token: AddressLike, account: AddressLike];
  export type OutputTuple = [token: string, account: string];
  export interface OutputObject {
    token: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [token: AddressLike, account: AddressLike];
  export type OutputTuple = [token: string, account: string];
  export interface OutputObject {
    token: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ERC1400TokensValidatorMock extends BaseContract {
  connect(runner?: ContractRunner | null): ERC1400TokensValidatorMock;
  waitForDeployment(): Promise<this>;

  interface: ERC1400TokensValidatorMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAllowlistAdmin: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  addAllowlisted: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  addBlocklistAdmin: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  addBlocklisted: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  addCertificateSigner: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  addPauser: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  balanceOnHold: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;

  balanceOnHoldByPartition: TypedContractMethod<
    [token: AddressLike, partition: BytesLike, account: AddressLike],
    [bigint],
    "view"
  >;

  canImplementInterfaceForAddress: TypedContractMethod<
    [interfaceHash: BytesLike, arg1: AddressLike],
    [string],
    "view"
  >;

  canValidate: TypedContractMethod<
    [data: IERC1400TokensValidator.ValidateDataStruct],
    [boolean],
    "view"
  >;

  executeHold: TypedContractMethod<
    [
      token: AddressLike,
      holdId: BytesLike,
      value: BigNumberish,
      secret: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  executeHoldAndKeepOpen: TypedContractMethod<
    [
      token: AddressLike,
      holdId: BytesLike,
      value: BigNumberish,
      secret: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  granularityByPartition: TypedContractMethod<
    [token: AddressLike, partition: BytesLike],
    [bigint],
    "view"
  >;

  hold: TypedContractMethod<
    [
      token: AddressLike,
      holdId: BytesLike,
      recipient: AddressLike,
      notary: AddressLike,
      partition: BytesLike,
      value: BigNumberish,
      timeToExpiration: BigNumberish,
      secretHash: BytesLike,
      certificate: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  holdFrom: TypedContractMethod<
    [
      token: AddressLike,
      holdId: BytesLike,
      sender: AddressLike,
      recipient: AddressLike,
      notary: AddressLike,
      partition: BytesLike,
      value: BigNumberish,
      timeToExpiration: BigNumberish,
      secretHash: BytesLike,
      certificate: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  holdFromWithExpirationDate: TypedContractMethod<
    [
      token: AddressLike,
      holdId: BytesLike,
      sender: AddressLike,
      recipient: AddressLike,
      notary: AddressLike,
      partition: BytesLike,
      value: BigNumberish,
      expiration: BigNumberish,
      secretHash: BytesLike,
      certificate: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  holdWithExpirationDate: TypedContractMethod<
    [
      token: AddressLike,
      holdId: BytesLike,
      recipient: AddressLike,
      notary: AddressLike,
      partition: BytesLike,
      value: BigNumberish,
      expiration: BigNumberish,
      secretHash: BytesLike,
      certificate: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  isAllowlistAdmin: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isAllowlisted: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isBlocklistAdmin: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isBlocklisted: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isCertificateSigner: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isPauser: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;

  pause: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  paused: TypedContractMethod<[token: AddressLike], [boolean], "view">;

  preHoldFor: TypedContractMethod<
    [
      token: AddressLike,
      holdId: BytesLike,
      recipient: AddressLike,
      notary: AddressLike,
      partition: BytesLike,
      value: BigNumberish,
      timeToExpiration: BigNumberish,
      secretHash: BytesLike,
      certificate: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  preHoldForWithExpirationDate: TypedContractMethod<
    [
      token: AddressLike,
      holdId: BytesLike,
      recipient: AddressLike,
      notary: AddressLike,
      partition: BytesLike,
      value: BigNumberish,
      expiration: BigNumberish,
      secretHash: BytesLike,
      certificate: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  registerTokenSetup: TypedContractMethod<
    [
      token: AddressLike,
      certificateActivated: BigNumberish,
      allowlistActivated: boolean,
      blocklistActivated: boolean,
      granularityByPartitionActivated: boolean,
      holdsActivated: boolean,
      operators: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  releaseHold: TypedContractMethod<
    [token: AddressLike, holdId: BytesLike],
    [boolean],
    "nonpayable"
  >;

  removeAllowlistAdmin: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  removeAllowlisted: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  removeBlocklistAdmin: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  removeBlocklisted: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  removeCertificateSigner: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  removePauser: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  renewHold: TypedContractMethod<
    [
      token: AddressLike,
      holdId: BytesLike,
      timeToExpiration: BigNumberish,
      certificate: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  renewHoldWithExpirationDate: TypedContractMethod<
    [
      token: AddressLike,
      holdId: BytesLike,
      expiration: BigNumberish,
      certificate: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  renounceAllowlistAdmin: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceBlocklistAdmin: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceCertificateSigner: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceMinter: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  renouncePauser: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  retrieveHoldData: TypedContractMethod<
    [token: AddressLike, holdId: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        string,
        bigint
      ] & {
        partition: string;
        sender: string;
        recipient: string;
        notary: string;
        value: bigint;
        expiration: bigint;
        secretHash: string;
        secret: string;
        status: bigint;
      }
    ],
    "view"
  >;

  retrieveTokenSetup: TypedContractMethod<
    [token: AddressLike],
    [[bigint, boolean, boolean, boolean, boolean, string[]]],
    "view"
  >;

  setGranularityByPartition: TypedContractMethod<
    [token: AddressLike, partition: BytesLike, granularity: BigNumberish],
    [void],
    "nonpayable"
  >;

  spendableBalanceOf: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;

  spendableBalanceOfByPartition: TypedContractMethod<
    [token: AddressLike, partition: BytesLike, account: AddressLike],
    [bigint],
    "view"
  >;

  tokensToValidate: TypedContractMethod<
    [
      payload: BytesLike,
      partition: BytesLike,
      operator: AddressLike,
      from: AddressLike,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  totalSupplyOnHold: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  totalSupplyOnHoldByPartition: TypedContractMethod<
    [token: AddressLike, partition: BytesLike],
    [bigint],
    "view"
  >;

  unpause: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  usedCertificateNonce: TypedContractMethod<
    [token: AddressLike, sender: AddressLike],
    [bigint],
    "view"
  >;

  usedCertificateSalt: TypedContractMethod<
    [token: AddressLike, salt: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAllowlistAdmin"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addAllowlisted"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addBlocklistAdmin"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addBlocklisted"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addCertificateSigner"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addPauser"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOnHold"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOnHoldByPartition"
  ): TypedContractMethod<
    [token: AddressLike, partition: BytesLike, account: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "canImplementInterfaceForAddress"
  ): TypedContractMethod<
    [interfaceHash: BytesLike, arg1: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "canValidate"
  ): TypedContractMethod<
    [data: IERC1400TokensValidator.ValidateDataStruct],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeHold"
  ): TypedContractMethod<
    [
      token: AddressLike,
      holdId: BytesLike,
      value: BigNumberish,
      secret: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeHoldAndKeepOpen"
  ): TypedContractMethod<
    [
      token: AddressLike,
      holdId: BytesLike,
      value: BigNumberish,
      secret: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "granularityByPartition"
  ): TypedContractMethod<
    [token: AddressLike, partition: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hold"
  ): TypedContractMethod<
    [
      token: AddressLike,
      holdId: BytesLike,
      recipient: AddressLike,
      notary: AddressLike,
      partition: BytesLike,
      value: BigNumberish,
      timeToExpiration: BigNumberish,
      secretHash: BytesLike,
      certificate: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "holdFrom"
  ): TypedContractMethod<
    [
      token: AddressLike,
      holdId: BytesLike,
      sender: AddressLike,
      recipient: AddressLike,
      notary: AddressLike,
      partition: BytesLike,
      value: BigNumberish,
      timeToExpiration: BigNumberish,
      secretHash: BytesLike,
      certificate: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "holdFromWithExpirationDate"
  ): TypedContractMethod<
    [
      token: AddressLike,
      holdId: BytesLike,
      sender: AddressLike,
      recipient: AddressLike,
      notary: AddressLike,
      partition: BytesLike,
      value: BigNumberish,
      expiration: BigNumberish,
      secretHash: BytesLike,
      certificate: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "holdWithExpirationDate"
  ): TypedContractMethod<
    [
      token: AddressLike,
      holdId: BytesLike,
      recipient: AddressLike,
      notary: AddressLike,
      partition: BytesLike,
      value: BigNumberish,
      expiration: BigNumberish,
      secretHash: BytesLike,
      certificate: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isAllowlistAdmin"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAllowlisted"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isBlocklistAdmin"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isBlocklisted"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isCertificateSigner"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPauser"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "preHoldFor"
  ): TypedContractMethod<
    [
      token: AddressLike,
      holdId: BytesLike,
      recipient: AddressLike,
      notary: AddressLike,
      partition: BytesLike,
      value: BigNumberish,
      timeToExpiration: BigNumberish,
      secretHash: BytesLike,
      certificate: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "preHoldForWithExpirationDate"
  ): TypedContractMethod<
    [
      token: AddressLike,
      holdId: BytesLike,
      recipient: AddressLike,
      notary: AddressLike,
      partition: BytesLike,
      value: BigNumberish,
      expiration: BigNumberish,
      secretHash: BytesLike,
      certificate: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerTokenSetup"
  ): TypedContractMethod<
    [
      token: AddressLike,
      certificateActivated: BigNumberish,
      allowlistActivated: boolean,
      blocklistActivated: boolean,
      granularityByPartitionActivated: boolean,
      holdsActivated: boolean,
      operators: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "releaseHold"
  ): TypedContractMethod<
    [token: AddressLike, holdId: BytesLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAllowlistAdmin"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAllowlisted"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeBlocklistAdmin"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeBlocklisted"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeCertificateSigner"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removePauser"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renewHold"
  ): TypedContractMethod<
    [
      token: AddressLike,
      holdId: BytesLike,
      timeToExpiration: BigNumberish,
      certificate: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renewHoldWithExpirationDate"
  ): TypedContractMethod<
    [
      token: AddressLike,
      holdId: BytesLike,
      expiration: BigNumberish,
      certificate: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceAllowlistAdmin"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceBlocklistAdmin"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceCertificateSigner"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceMinter"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renouncePauser"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "retrieveHoldData"
  ): TypedContractMethod<
    [token: AddressLike, holdId: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        string,
        bigint
      ] & {
        partition: string;
        sender: string;
        recipient: string;
        notary: string;
        value: bigint;
        expiration: bigint;
        secretHash: string;
        secret: string;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "retrieveTokenSetup"
  ): TypedContractMethod<
    [token: AddressLike],
    [[bigint, boolean, boolean, boolean, boolean, string[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "setGranularityByPartition"
  ): TypedContractMethod<
    [token: AddressLike, partition: BytesLike, granularity: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "spendableBalanceOf"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "spendableBalanceOfByPartition"
  ): TypedContractMethod<
    [token: AddressLike, partition: BytesLike, account: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokensToValidate"
  ): TypedContractMethod<
    [
      payload: BytesLike,
      partition: BytesLike,
      operator: AddressLike,
      from: AddressLike,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalSupplyOnHold"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyOnHoldByPartition"
  ): TypedContractMethod<
    [token: AddressLike, partition: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usedCertificateNonce"
  ): TypedContractMethod<
    [token: AddressLike, sender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "usedCertificateSalt"
  ): TypedContractMethod<
    [token: AddressLike, salt: BytesLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "AllowlistAdminAdded"
  ): TypedContractEvent<
    AllowlistAdminAddedEvent.InputTuple,
    AllowlistAdminAddedEvent.OutputTuple,
    AllowlistAdminAddedEvent.OutputObject
  >;
  getEvent(
    key: "AllowlistAdminRemoved"
  ): TypedContractEvent<
    AllowlistAdminRemovedEvent.InputTuple,
    AllowlistAdminRemovedEvent.OutputTuple,
    AllowlistAdminRemovedEvent.OutputObject
  >;
  getEvent(
    key: "AllowlistedAdded"
  ): TypedContractEvent<
    AllowlistedAddedEvent.InputTuple,
    AllowlistedAddedEvent.OutputTuple,
    AllowlistedAddedEvent.OutputObject
  >;
  getEvent(
    key: "AllowlistedRemoved"
  ): TypedContractEvent<
    AllowlistedRemovedEvent.InputTuple,
    AllowlistedRemovedEvent.OutputTuple,
    AllowlistedRemovedEvent.OutputObject
  >;
  getEvent(
    key: "BlocklistAdminAdded"
  ): TypedContractEvent<
    BlocklistAdminAddedEvent.InputTuple,
    BlocklistAdminAddedEvent.OutputTuple,
    BlocklistAdminAddedEvent.OutputObject
  >;
  getEvent(
    key: "BlocklistAdminRemoved"
  ): TypedContractEvent<
    BlocklistAdminRemovedEvent.InputTuple,
    BlocklistAdminRemovedEvent.OutputTuple,
    BlocklistAdminRemovedEvent.OutputObject
  >;
  getEvent(
    key: "BlocklistedAdded"
  ): TypedContractEvent<
    BlocklistedAddedEvent.InputTuple,
    BlocklistedAddedEvent.OutputTuple,
    BlocklistedAddedEvent.OutputObject
  >;
  getEvent(
    key: "BlocklistedRemoved"
  ): TypedContractEvent<
    BlocklistedRemovedEvent.InputTuple,
    BlocklistedRemovedEvent.OutputTuple,
    BlocklistedRemovedEvent.OutputObject
  >;
  getEvent(
    key: "CertificateSignerAdded"
  ): TypedContractEvent<
    CertificateSignerAddedEvent.InputTuple,
    CertificateSignerAddedEvent.OutputTuple,
    CertificateSignerAddedEvent.OutputObject
  >;
  getEvent(
    key: "CertificateSignerRemoved"
  ): TypedContractEvent<
    CertificateSignerRemovedEvent.InputTuple,
    CertificateSignerRemovedEvent.OutputTuple,
    CertificateSignerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "HoldCreated"
  ): TypedContractEvent<
    HoldCreatedEvent.InputTuple,
    HoldCreatedEvent.OutputTuple,
    HoldCreatedEvent.OutputObject
  >;
  getEvent(
    key: "HoldExecuted"
  ): TypedContractEvent<
    HoldExecutedEvent.InputTuple,
    HoldExecutedEvent.OutputTuple,
    HoldExecutedEvent.OutputObject
  >;
  getEvent(
    key: "HoldExecutedAndKeptOpen"
  ): TypedContractEvent<
    HoldExecutedAndKeptOpenEvent.InputTuple,
    HoldExecutedAndKeptOpenEvent.OutputTuple,
    HoldExecutedAndKeptOpenEvent.OutputObject
  >;
  getEvent(
    key: "HoldReleased"
  ): TypedContractEvent<
    HoldReleasedEvent.InputTuple,
    HoldReleasedEvent.OutputTuple,
    HoldReleasedEvent.OutputObject
  >;
  getEvent(
    key: "HoldRenewed"
  ): TypedContractEvent<
    HoldRenewedEvent.InputTuple,
    HoldRenewedEvent.OutputTuple,
    HoldRenewedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PauserAdded"
  ): TypedContractEvent<
    PauserAddedEvent.InputTuple,
    PauserAddedEvent.OutputTuple,
    PauserAddedEvent.OutputObject
  >;
  getEvent(
    key: "PauserRemoved"
  ): TypedContractEvent<
    PauserRemovedEvent.InputTuple,
    PauserRemovedEvent.OutputTuple,
    PauserRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AllowlistAdminAdded(address,address)": TypedContractEvent<
      AllowlistAdminAddedEvent.InputTuple,
      AllowlistAdminAddedEvent.OutputTuple,
      AllowlistAdminAddedEvent.OutputObject
    >;
    AllowlistAdminAdded: TypedContractEvent<
      AllowlistAdminAddedEvent.InputTuple,
      AllowlistAdminAddedEvent.OutputTuple,
      AllowlistAdminAddedEvent.OutputObject
    >;

    "AllowlistAdminRemoved(address,address)": TypedContractEvent<
      AllowlistAdminRemovedEvent.InputTuple,
      AllowlistAdminRemovedEvent.OutputTuple,
      AllowlistAdminRemovedEvent.OutputObject
    >;
    AllowlistAdminRemoved: TypedContractEvent<
      AllowlistAdminRemovedEvent.InputTuple,
      AllowlistAdminRemovedEvent.OutputTuple,
      AllowlistAdminRemovedEvent.OutputObject
    >;

    "AllowlistedAdded(address,address)": TypedContractEvent<
      AllowlistedAddedEvent.InputTuple,
      AllowlistedAddedEvent.OutputTuple,
      AllowlistedAddedEvent.OutputObject
    >;
    AllowlistedAdded: TypedContractEvent<
      AllowlistedAddedEvent.InputTuple,
      AllowlistedAddedEvent.OutputTuple,
      AllowlistedAddedEvent.OutputObject
    >;

    "AllowlistedRemoved(address,address)": TypedContractEvent<
      AllowlistedRemovedEvent.InputTuple,
      AllowlistedRemovedEvent.OutputTuple,
      AllowlistedRemovedEvent.OutputObject
    >;
    AllowlistedRemoved: TypedContractEvent<
      AllowlistedRemovedEvent.InputTuple,
      AllowlistedRemovedEvent.OutputTuple,
      AllowlistedRemovedEvent.OutputObject
    >;

    "BlocklistAdminAdded(address,address)": TypedContractEvent<
      BlocklistAdminAddedEvent.InputTuple,
      BlocklistAdminAddedEvent.OutputTuple,
      BlocklistAdminAddedEvent.OutputObject
    >;
    BlocklistAdminAdded: TypedContractEvent<
      BlocklistAdminAddedEvent.InputTuple,
      BlocklistAdminAddedEvent.OutputTuple,
      BlocklistAdminAddedEvent.OutputObject
    >;

    "BlocklistAdminRemoved(address,address)": TypedContractEvent<
      BlocklistAdminRemovedEvent.InputTuple,
      BlocklistAdminRemovedEvent.OutputTuple,
      BlocklistAdminRemovedEvent.OutputObject
    >;
    BlocklistAdminRemoved: TypedContractEvent<
      BlocklistAdminRemovedEvent.InputTuple,
      BlocklistAdminRemovedEvent.OutputTuple,
      BlocklistAdminRemovedEvent.OutputObject
    >;

    "BlocklistedAdded(address,address)": TypedContractEvent<
      BlocklistedAddedEvent.InputTuple,
      BlocklistedAddedEvent.OutputTuple,
      BlocklistedAddedEvent.OutputObject
    >;
    BlocklistedAdded: TypedContractEvent<
      BlocklistedAddedEvent.InputTuple,
      BlocklistedAddedEvent.OutputTuple,
      BlocklistedAddedEvent.OutputObject
    >;

    "BlocklistedRemoved(address,address)": TypedContractEvent<
      BlocklistedRemovedEvent.InputTuple,
      BlocklistedRemovedEvent.OutputTuple,
      BlocklistedRemovedEvent.OutputObject
    >;
    BlocklistedRemoved: TypedContractEvent<
      BlocklistedRemovedEvent.InputTuple,
      BlocklistedRemovedEvent.OutputTuple,
      BlocklistedRemovedEvent.OutputObject
    >;

    "CertificateSignerAdded(address,address)": TypedContractEvent<
      CertificateSignerAddedEvent.InputTuple,
      CertificateSignerAddedEvent.OutputTuple,
      CertificateSignerAddedEvent.OutputObject
    >;
    CertificateSignerAdded: TypedContractEvent<
      CertificateSignerAddedEvent.InputTuple,
      CertificateSignerAddedEvent.OutputTuple,
      CertificateSignerAddedEvent.OutputObject
    >;

    "CertificateSignerRemoved(address,address)": TypedContractEvent<
      CertificateSignerRemovedEvent.InputTuple,
      CertificateSignerRemovedEvent.OutputTuple,
      CertificateSignerRemovedEvent.OutputObject
    >;
    CertificateSignerRemoved: TypedContractEvent<
      CertificateSignerRemovedEvent.InputTuple,
      CertificateSignerRemovedEvent.OutputTuple,
      CertificateSignerRemovedEvent.OutputObject
    >;

    "HoldCreated(address,bytes32,bytes32,address,address,address,uint256,uint256,bytes32)": TypedContractEvent<
      HoldCreatedEvent.InputTuple,
      HoldCreatedEvent.OutputTuple,
      HoldCreatedEvent.OutputObject
    >;
    HoldCreated: TypedContractEvent<
      HoldCreatedEvent.InputTuple,
      HoldCreatedEvent.OutputTuple,
      HoldCreatedEvent.OutputObject
    >;

    "HoldExecuted(address,bytes32,address,uint256,uint256,bytes32)": TypedContractEvent<
      HoldExecutedEvent.InputTuple,
      HoldExecutedEvent.OutputTuple,
      HoldExecutedEvent.OutputObject
    >;
    HoldExecuted: TypedContractEvent<
      HoldExecutedEvent.InputTuple,
      HoldExecutedEvent.OutputTuple,
      HoldExecutedEvent.OutputObject
    >;

    "HoldExecutedAndKeptOpen(address,bytes32,address,uint256,uint256,bytes32)": TypedContractEvent<
      HoldExecutedAndKeptOpenEvent.InputTuple,
      HoldExecutedAndKeptOpenEvent.OutputTuple,
      HoldExecutedAndKeptOpenEvent.OutputObject
    >;
    HoldExecutedAndKeptOpen: TypedContractEvent<
      HoldExecutedAndKeptOpenEvent.InputTuple,
      HoldExecutedAndKeptOpenEvent.OutputTuple,
      HoldExecutedAndKeptOpenEvent.OutputObject
    >;

    "HoldReleased(address,bytes32,address,uint8)": TypedContractEvent<
      HoldReleasedEvent.InputTuple,
      HoldReleasedEvent.OutputTuple,
      HoldReleasedEvent.OutputObject
    >;
    HoldReleased: TypedContractEvent<
      HoldReleasedEvent.InputTuple,
      HoldReleasedEvent.OutputTuple,
      HoldReleasedEvent.OutputObject
    >;

    "HoldRenewed(address,bytes32,address,uint256,uint256)": TypedContractEvent<
      HoldRenewedEvent.InputTuple,
      HoldRenewedEvent.OutputTuple,
      HoldRenewedEvent.OutputObject
    >;
    HoldRenewed: TypedContractEvent<
      HoldRenewedEvent.InputTuple,
      HoldRenewedEvent.OutputTuple,
      HoldRenewedEvent.OutputObject
    >;

    "Paused(address,address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PauserAdded(address,address)": TypedContractEvent<
      PauserAddedEvent.InputTuple,
      PauserAddedEvent.OutputTuple,
      PauserAddedEvent.OutputObject
    >;
    PauserAdded: TypedContractEvent<
      PauserAddedEvent.InputTuple,
      PauserAddedEvent.OutputTuple,
      PauserAddedEvent.OutputObject
    >;

    "PauserRemoved(address,address)": TypedContractEvent<
      PauserRemovedEvent.InputTuple,
      PauserRemovedEvent.OutputTuple,
      PauserRemovedEvent.OutputObject
    >;
    PauserRemoved: TypedContractEvent<
      PauserRemovedEvent.InputTuple,
      PauserRemovedEvent.OutputTuple,
      PauserRemovedEvent.OutputObject
    >;

    "Unpaused(address,address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
