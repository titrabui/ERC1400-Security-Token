/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface BlocklistMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addBlocklistAdmin"
      | "addBlocklisted"
      | "isBlocklistAdmin"
      | "isBlocklisted"
      | "mockFunction"
      | "removeBlocklistAdmin"
      | "removeBlocklisted"
      | "renounceBlocklistAdmin"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BlocklistAdminAdded"
      | "BlocklistAdminRemoved"
      | "BlocklistedAdded"
      | "BlocklistedRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addBlocklistAdmin",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addBlocklisted",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlocklistAdmin",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlocklisted",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mockFunction",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBlocklistAdmin",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBlocklisted",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceBlocklistAdmin",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBlocklistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBlocklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlocklistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlocklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBlocklistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBlocklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceBlocklistAdmin",
    data: BytesLike
  ): Result;
}

export namespace BlocklistAdminAddedEvent {
  export type InputTuple = [token: AddressLike, account: AddressLike];
  export type OutputTuple = [token: string, account: string];
  export interface OutputObject {
    token: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlocklistAdminRemovedEvent {
  export type InputTuple = [token: AddressLike, account: AddressLike];
  export type OutputTuple = [token: string, account: string];
  export interface OutputObject {
    token: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlocklistedAddedEvent {
  export type InputTuple = [token: AddressLike, account: AddressLike];
  export type OutputTuple = [token: string, account: string];
  export interface OutputObject {
    token: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlocklistedRemovedEvent {
  export type InputTuple = [token: AddressLike, account: AddressLike];
  export type OutputTuple = [token: string, account: string];
  export interface OutputObject {
    token: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BlocklistMock extends BaseContract {
  connect(runner?: ContractRunner | null): BlocklistMock;
  waitForDeployment(): Promise<this>;

  interface: BlocklistMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addBlocklistAdmin: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  addBlocklisted: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  isBlocklistAdmin: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isBlocklisted: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;

  mockFunction: TypedContractMethod<
    [token: AddressLike, mockActivated: boolean],
    [void],
    "nonpayable"
  >;

  removeBlocklistAdmin: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  removeBlocklisted: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceBlocklistAdmin: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addBlocklistAdmin"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addBlocklisted"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isBlocklistAdmin"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isBlocklisted"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mockFunction"
  ): TypedContractMethod<
    [token: AddressLike, mockActivated: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeBlocklistAdmin"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeBlocklisted"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceBlocklistAdmin"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "BlocklistAdminAdded"
  ): TypedContractEvent<
    BlocklistAdminAddedEvent.InputTuple,
    BlocklistAdminAddedEvent.OutputTuple,
    BlocklistAdminAddedEvent.OutputObject
  >;
  getEvent(
    key: "BlocklistAdminRemoved"
  ): TypedContractEvent<
    BlocklistAdminRemovedEvent.InputTuple,
    BlocklistAdminRemovedEvent.OutputTuple,
    BlocklistAdminRemovedEvent.OutputObject
  >;
  getEvent(
    key: "BlocklistedAdded"
  ): TypedContractEvent<
    BlocklistedAddedEvent.InputTuple,
    BlocklistedAddedEvent.OutputTuple,
    BlocklistedAddedEvent.OutputObject
  >;
  getEvent(
    key: "BlocklistedRemoved"
  ): TypedContractEvent<
    BlocklistedRemovedEvent.InputTuple,
    BlocklistedRemovedEvent.OutputTuple,
    BlocklistedRemovedEvent.OutputObject
  >;

  filters: {
    "BlocklistAdminAdded(address,address)": TypedContractEvent<
      BlocklistAdminAddedEvent.InputTuple,
      BlocklistAdminAddedEvent.OutputTuple,
      BlocklistAdminAddedEvent.OutputObject
    >;
    BlocklistAdminAdded: TypedContractEvent<
      BlocklistAdminAddedEvent.InputTuple,
      BlocklistAdminAddedEvent.OutputTuple,
      BlocklistAdminAddedEvent.OutputObject
    >;

    "BlocklistAdminRemoved(address,address)": TypedContractEvent<
      BlocklistAdminRemovedEvent.InputTuple,
      BlocklistAdminRemovedEvent.OutputTuple,
      BlocklistAdminRemovedEvent.OutputObject
    >;
    BlocklistAdminRemoved: TypedContractEvent<
      BlocklistAdminRemovedEvent.InputTuple,
      BlocklistAdminRemovedEvent.OutputTuple,
      BlocklistAdminRemovedEvent.OutputObject
    >;

    "BlocklistedAdded(address,address)": TypedContractEvent<
      BlocklistedAddedEvent.InputTuple,
      BlocklistedAddedEvent.OutputTuple,
      BlocklistedAddedEvent.OutputObject
    >;
    BlocklistedAdded: TypedContractEvent<
      BlocklistedAddedEvent.InputTuple,
      BlocklistedAddedEvent.OutputTuple,
      BlocklistedAddedEvent.OutputObject
    >;

    "BlocklistedRemoved(address,address)": TypedContractEvent<
      BlocklistedRemovedEvent.InputTuple,
      BlocklistedRemovedEvent.OutputTuple,
      BlocklistedRemovedEvent.OutputObject
    >;
    BlocklistedRemoved: TypedContractEvent<
      BlocklistedRemovedEvent.InputTuple,
      BlocklistedRemovedEvent.OutputTuple,
      BlocklistedRemovedEvent.OutputObject
    >;
  };
}
