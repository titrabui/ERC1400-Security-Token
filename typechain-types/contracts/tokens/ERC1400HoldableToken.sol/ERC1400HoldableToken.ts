/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ERC1400HoldableTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addMinter"
      | "allowance"
      | "allowanceByPartition"
      | "approve"
      | "approveByPartition"
      | "authorizeOperator"
      | "authorizeOperatorByPartition"
      | "balanceOf"
      | "balanceOfByPartition"
      | "canImplementInterfaceForAddress"
      | "controllers"
      | "controllersByPartition"
      | "decimals"
      | "domainName"
      | "domainSeparator"
      | "domainVersion"
      | "generateDomainSeparator"
      | "getAllDocuments"
      | "getDefaultPartitions"
      | "getDocument"
      | "granularity"
      | "isControllable"
      | "isIssuable"
      | "isMinter"
      | "isOperator"
      | "isOperatorForPartition"
      | "issue"
      | "issueByPartition"
      | "migrate"
      | "name"
      | "operatorRedeemByPartition"
      | "operatorTransferByPartition"
      | "owner"
      | "partitionsOf"
      | "redeem"
      | "redeemByPartition"
      | "redeemFrom"
      | "removeDocument"
      | "removeMinter"
      | "renounceControl"
      | "renounceIssuance"
      | "renounceMinter"
      | "renounceOwnership"
      | "revokeOperator"
      | "revokeOperatorByPartition"
      | "setControllers"
      | "setDefaultPartitions"
      | "setDocument"
      | "setPartitionControllers"
      | "setTokenExtension"
      | "symbol"
      | "totalPartitions"
      | "totalSupply"
      | "totalSupplyByPartition"
      | "transfer"
      | "transferByPartition"
      | "transferFrom"
      | "transferFromWithData"
      | "transferOwnership"
      | "transferWithData"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalByPartition"
      | "AuthorizedOperator"
      | "AuthorizedOperatorByPartition"
      | "ChangedPartition"
      | "DocumentRemoved"
      | "DocumentUpdated"
      | "Issued"
      | "IssuedByPartition"
      | "MinterAdded"
      | "MinterRemoved"
      | "OwnershipTransferred"
      | "Redeemed"
      | "RedeemedByPartition"
      | "RevokedOperator"
      | "RevokedOperatorByPartition"
      | "Transfer"
      | "TransferByPartition"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowanceByPartition",
    values: [BytesLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveByPartition",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeOperatorByPartition",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfByPartition",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canImplementInterfaceForAddress",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "controllers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controllersByPartition",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "domainName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllDocuments",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultPartitions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDocument",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "granularity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isControllable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isIssuable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperatorForPartition",
    values: [BytesLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issue",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issueByPartition",
    values: [BytesLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "operatorRedeemByPartition",
    values: [BytesLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorTransferByPartition",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "partitionsOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemByPartition",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFrom",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDocument",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceIssuance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceMinter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperatorByPartition",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setControllers",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultPartitions",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDocument",
    values: [BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPartitionControllers",
    values: [BytesLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenExtension",
    values: [AddressLike, string, boolean, boolean, boolean]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalPartitions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyByPartition",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferByPartition",
    values: [BytesLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromWithData",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferWithData",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "addMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowanceByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeOperatorByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canImplementInterfaceForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllersByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "domainName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllDocuments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultPartitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "granularity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isControllable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isIssuable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOperatorForPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issueByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operatorRedeemByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorTransferByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "partitionsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeemFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceIssuance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperatorByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultPartitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPartitionControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalPartitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromWithData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferWithData",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalByPartitionEvent {
  export type InputTuple = [
    partition: BytesLike,
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [
    partition: string,
    owner: string,
    spender: string,
    value: bigint
  ];
  export interface OutputObject {
    partition: string;
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuthorizedOperatorEvent {
  export type InputTuple = [operator: AddressLike, tokenHolder: AddressLike];
  export type OutputTuple = [operator: string, tokenHolder: string];
  export interface OutputObject {
    operator: string;
    tokenHolder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuthorizedOperatorByPartitionEvent {
  export type InputTuple = [
    partition: BytesLike,
    operator: AddressLike,
    tokenHolder: AddressLike
  ];
  export type OutputTuple = [
    partition: string,
    operator: string,
    tokenHolder: string
  ];
  export interface OutputObject {
    partition: string;
    operator: string;
    tokenHolder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangedPartitionEvent {
  export type InputTuple = [
    fromPartition: BytesLike,
    toPartition: BytesLike,
    value: BigNumberish
  ];
  export type OutputTuple = [
    fromPartition: string,
    toPartition: string,
    value: bigint
  ];
  export interface OutputObject {
    fromPartition: string;
    toPartition: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DocumentRemovedEvent {
  export type InputTuple = [
    name: BytesLike,
    uri: string,
    documentHash: BytesLike
  ];
  export type OutputTuple = [name: string, uri: string, documentHash: string];
  export interface OutputObject {
    name: string;
    uri: string;
    documentHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DocumentUpdatedEvent {
  export type InputTuple = [
    name: BytesLike,
    uri: string,
    documentHash: BytesLike
  ];
  export type OutputTuple = [name: string, uri: string, documentHash: string];
  export interface OutputObject {
    name: string;
    uri: string;
    documentHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IssuedEvent {
  export type InputTuple = [
    operator: AddressLike,
    to: AddressLike,
    value: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    operator: string,
    to: string,
    value: bigint,
    data: string
  ];
  export interface OutputObject {
    operator: string;
    to: string;
    value: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IssuedByPartitionEvent {
  export type InputTuple = [
    partition: BytesLike,
    operator: AddressLike,
    to: AddressLike,
    value: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike
  ];
  export type OutputTuple = [
    partition: string,
    operator: string,
    to: string,
    value: bigint,
    data: string,
    operatorData: string
  ];
  export interface OutputObject {
    partition: string;
    operator: string;
    to: string;
    value: bigint;
    data: string;
    operatorData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinterAddedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinterRemovedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemedEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    value: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    value: bigint,
    data: string
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    value: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemedByPartitionEvent {
  export type InputTuple = [
    partition: BytesLike,
    operator: AddressLike,
    from: AddressLike,
    value: BigNumberish,
    operatorData: BytesLike
  ];
  export type OutputTuple = [
    partition: string,
    operator: string,
    from: string,
    value: bigint,
    operatorData: string
  ];
  export interface OutputObject {
    partition: string;
    operator: string;
    from: string;
    value: bigint;
    operatorData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokedOperatorEvent {
  export type InputTuple = [operator: AddressLike, tokenHolder: AddressLike];
  export type OutputTuple = [operator: string, tokenHolder: string];
  export interface OutputObject {
    operator: string;
    tokenHolder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokedOperatorByPartitionEvent {
  export type InputTuple = [
    partition: BytesLike,
    operator: AddressLike,
    tokenHolder: AddressLike
  ];
  export type OutputTuple = [
    partition: string,
    operator: string,
    tokenHolder: string
  ];
  export interface OutputObject {
    partition: string;
    operator: string;
    tokenHolder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferByPartitionEvent {
  export type InputTuple = [
    fromPartition: BytesLike,
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike
  ];
  export type OutputTuple = [
    fromPartition: string,
    operator: string,
    from: string,
    to: string,
    value: bigint,
    data: string,
    operatorData: string
  ];
  export interface OutputObject {
    fromPartition: string;
    operator: string;
    from: string;
    to: string;
    value: bigint;
    data: string;
    operatorData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ERC1400HoldableToken extends BaseContract {
  connect(runner?: ContractRunner | null): ERC1400HoldableToken;
  waitForDeployment(): Promise<this>;

  interface: ERC1400HoldableTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addMinter: TypedContractMethod<[account: AddressLike], [void], "nonpayable">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  allowanceByPartition: TypedContractMethod<
    [partition: BytesLike, owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  approveByPartition: TypedContractMethod<
    [partition: BytesLike, spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  authorizeOperator: TypedContractMethod<
    [operator: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizeOperatorByPartition: TypedContractMethod<
    [partition: BytesLike, operator: AddressLike],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[tokenHolder: AddressLike], [bigint], "view">;

  balanceOfByPartition: TypedContractMethod<
    [partition: BytesLike, tokenHolder: AddressLike],
    [bigint],
    "view"
  >;

  canImplementInterfaceForAddress: TypedContractMethod<
    [interfaceHash: BytesLike, arg1: AddressLike],
    [string],
    "view"
  >;

  controllers: TypedContractMethod<[], [string[]], "view">;

  controllersByPartition: TypedContractMethod<
    [partition: BytesLike],
    [string[]],
    "view"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  domainName: TypedContractMethod<[], [string], "view">;

  domainSeparator: TypedContractMethod<[], [string], "nonpayable">;

  domainVersion: TypedContractMethod<[], [string], "view">;

  generateDomainSeparator: TypedContractMethod<[], [string], "view">;

  getAllDocuments: TypedContractMethod<[], [string[]], "view">;

  getDefaultPartitions: TypedContractMethod<[], [string[]], "view">;

  getDocument: TypedContractMethod<
    [documentName: BytesLike],
    [[string, string, bigint]],
    "view"
  >;

  granularity: TypedContractMethod<[], [bigint], "view">;

  isControllable: TypedContractMethod<[], [boolean], "view">;

  isIssuable: TypedContractMethod<[], [boolean], "view">;

  isMinter: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  isOperator: TypedContractMethod<
    [operator: AddressLike, tokenHolder: AddressLike],
    [boolean],
    "view"
  >;

  isOperatorForPartition: TypedContractMethod<
    [partition: BytesLike, operator: AddressLike, tokenHolder: AddressLike],
    [boolean],
    "view"
  >;

  issue: TypedContractMethod<
    [tokenHolder: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  issueByPartition: TypedContractMethod<
    [
      partition: BytesLike,
      tokenHolder: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  migrate: TypedContractMethod<
    [newContractAddress: AddressLike, definitive: boolean],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  operatorRedeemByPartition: TypedContractMethod<
    [
      partition: BytesLike,
      tokenHolder: AddressLike,
      value: BigNumberish,
      operatorData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  operatorTransferByPartition: TypedContractMethod<
    [
      partition: BytesLike,
      from: AddressLike,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  partitionsOf: TypedContractMethod<
    [tokenHolder: AddressLike],
    [string[]],
    "view"
  >;

  redeem: TypedContractMethod<
    [value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  redeemByPartition: TypedContractMethod<
    [partition: BytesLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  redeemFrom: TypedContractMethod<
    [from: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  removeDocument: TypedContractMethod<
    [documentName: BytesLike],
    [void],
    "nonpayable"
  >;

  removeMinter: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceControl: TypedContractMethod<[], [void], "nonpayable">;

  renounceIssuance: TypedContractMethod<[], [void], "nonpayable">;

  renounceMinter: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revokeOperator: TypedContractMethod<
    [operator: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeOperatorByPartition: TypedContractMethod<
    [partition: BytesLike, operator: AddressLike],
    [void],
    "nonpayable"
  >;

  setControllers: TypedContractMethod<
    [operators: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setDefaultPartitions: TypedContractMethod<
    [partitions: BytesLike[]],
    [void],
    "nonpayable"
  >;

  setDocument: TypedContractMethod<
    [documentName: BytesLike, uri: string, documentHash: BytesLike],
    [void],
    "nonpayable"
  >;

  setPartitionControllers: TypedContractMethod<
    [partition: BytesLike, operators: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setTokenExtension: TypedContractMethod<
    [
      extension: AddressLike,
      interfaceLabel: string,
      removeOldExtensionRoles: boolean,
      addMinterRoleForExtension: boolean,
      addControllerRoleForExtension: boolean
    ],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalPartitions: TypedContractMethod<[], [string[]], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  totalSupplyByPartition: TypedContractMethod<
    [partition: BytesLike],
    [bigint],
    "view"
  >;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferByPartition: TypedContractMethod<
    [
      partition: BytesLike,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFromWithData: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferWithData: TypedContractMethod<
    [to: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addMinter"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "allowanceByPartition"
  ): TypedContractMethod<
    [partition: BytesLike, owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveByPartition"
  ): TypedContractMethod<
    [partition: BytesLike, spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizeOperator"
  ): TypedContractMethod<[operator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizeOperatorByPartition"
  ): TypedContractMethod<
    [partition: BytesLike, operator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[tokenHolder: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfByPartition"
  ): TypedContractMethod<
    [partition: BytesLike, tokenHolder: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "canImplementInterfaceForAddress"
  ): TypedContractMethod<
    [interfaceHash: BytesLike, arg1: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "controllers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "controllersByPartition"
  ): TypedContractMethod<[partition: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "domainName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "domainSeparator"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "domainVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "generateDomainSeparator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllDocuments"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getDefaultPartitions"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getDocument"
  ): TypedContractMethod<
    [documentName: BytesLike],
    [[string, string, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "granularity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isControllable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isIssuable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isMinter"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isOperator"
  ): TypedContractMethod<
    [operator: AddressLike, tokenHolder: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isOperatorForPartition"
  ): TypedContractMethod<
    [partition: BytesLike, operator: AddressLike, tokenHolder: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "issue"
  ): TypedContractMethod<
    [tokenHolder: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "issueByPartition"
  ): TypedContractMethod<
    [
      partition: BytesLike,
      tokenHolder: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "migrate"
  ): TypedContractMethod<
    [newContractAddress: AddressLike, definitive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "operatorRedeemByPartition"
  ): TypedContractMethod<
    [
      partition: BytesLike,
      tokenHolder: AddressLike,
      value: BigNumberish,
      operatorData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "operatorTransferByPartition"
  ): TypedContractMethod<
    [
      partition: BytesLike,
      from: AddressLike,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "partitionsOf"
  ): TypedContractMethod<[tokenHolder: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<
    [value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemByPartition"
  ): TypedContractMethod<
    [partition: BytesLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemFrom"
  ): TypedContractMethod<
    [from: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeDocument"
  ): TypedContractMethod<[documentName: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeMinter"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceControl"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceIssuance"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceMinter"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeOperator"
  ): TypedContractMethod<[operator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeOperatorByPartition"
  ): TypedContractMethod<
    [partition: BytesLike, operator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setControllers"
  ): TypedContractMethod<[operators: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDefaultPartitions"
  ): TypedContractMethod<[partitions: BytesLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDocument"
  ): TypedContractMethod<
    [documentName: BytesLike, uri: string, documentHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPartitionControllers"
  ): TypedContractMethod<
    [partition: BytesLike, operators: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenExtension"
  ): TypedContractMethod<
    [
      extension: AddressLike,
      interfaceLabel: string,
      removeOldExtensionRoles: boolean,
      addMinterRoleForExtension: boolean,
      addControllerRoleForExtension: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalPartitions"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyByPartition"
  ): TypedContractMethod<[partition: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferByPartition"
  ): TypedContractMethod<
    [
      partition: BytesLike,
      to: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFromWithData"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferWithData"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalByPartition"
  ): TypedContractEvent<
    ApprovalByPartitionEvent.InputTuple,
    ApprovalByPartitionEvent.OutputTuple,
    ApprovalByPartitionEvent.OutputObject
  >;
  getEvent(
    key: "AuthorizedOperator"
  ): TypedContractEvent<
    AuthorizedOperatorEvent.InputTuple,
    AuthorizedOperatorEvent.OutputTuple,
    AuthorizedOperatorEvent.OutputObject
  >;
  getEvent(
    key: "AuthorizedOperatorByPartition"
  ): TypedContractEvent<
    AuthorizedOperatorByPartitionEvent.InputTuple,
    AuthorizedOperatorByPartitionEvent.OutputTuple,
    AuthorizedOperatorByPartitionEvent.OutputObject
  >;
  getEvent(
    key: "ChangedPartition"
  ): TypedContractEvent<
    ChangedPartitionEvent.InputTuple,
    ChangedPartitionEvent.OutputTuple,
    ChangedPartitionEvent.OutputObject
  >;
  getEvent(
    key: "DocumentRemoved"
  ): TypedContractEvent<
    DocumentRemovedEvent.InputTuple,
    DocumentRemovedEvent.OutputTuple,
    DocumentRemovedEvent.OutputObject
  >;
  getEvent(
    key: "DocumentUpdated"
  ): TypedContractEvent<
    DocumentUpdatedEvent.InputTuple,
    DocumentUpdatedEvent.OutputTuple,
    DocumentUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Issued"
  ): TypedContractEvent<
    IssuedEvent.InputTuple,
    IssuedEvent.OutputTuple,
    IssuedEvent.OutputObject
  >;
  getEvent(
    key: "IssuedByPartition"
  ): TypedContractEvent<
    IssuedByPartitionEvent.InputTuple,
    IssuedByPartitionEvent.OutputTuple,
    IssuedByPartitionEvent.OutputObject
  >;
  getEvent(
    key: "MinterAdded"
  ): TypedContractEvent<
    MinterAddedEvent.InputTuple,
    MinterAddedEvent.OutputTuple,
    MinterAddedEvent.OutputObject
  >;
  getEvent(
    key: "MinterRemoved"
  ): TypedContractEvent<
    MinterRemovedEvent.InputTuple,
    MinterRemovedEvent.OutputTuple,
    MinterRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Redeemed"
  ): TypedContractEvent<
    RedeemedEvent.InputTuple,
    RedeemedEvent.OutputTuple,
    RedeemedEvent.OutputObject
  >;
  getEvent(
    key: "RedeemedByPartition"
  ): TypedContractEvent<
    RedeemedByPartitionEvent.InputTuple,
    RedeemedByPartitionEvent.OutputTuple,
    RedeemedByPartitionEvent.OutputObject
  >;
  getEvent(
    key: "RevokedOperator"
  ): TypedContractEvent<
    RevokedOperatorEvent.InputTuple,
    RevokedOperatorEvent.OutputTuple,
    RevokedOperatorEvent.OutputObject
  >;
  getEvent(
    key: "RevokedOperatorByPartition"
  ): TypedContractEvent<
    RevokedOperatorByPartitionEvent.InputTuple,
    RevokedOperatorByPartitionEvent.OutputTuple,
    RevokedOperatorByPartitionEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TransferByPartition"
  ): TypedContractEvent<
    TransferByPartitionEvent.InputTuple,
    TransferByPartitionEvent.OutputTuple,
    TransferByPartitionEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalByPartition(bytes32,address,address,uint256)": TypedContractEvent<
      ApprovalByPartitionEvent.InputTuple,
      ApprovalByPartitionEvent.OutputTuple,
      ApprovalByPartitionEvent.OutputObject
    >;
    ApprovalByPartition: TypedContractEvent<
      ApprovalByPartitionEvent.InputTuple,
      ApprovalByPartitionEvent.OutputTuple,
      ApprovalByPartitionEvent.OutputObject
    >;

    "AuthorizedOperator(address,address)": TypedContractEvent<
      AuthorizedOperatorEvent.InputTuple,
      AuthorizedOperatorEvent.OutputTuple,
      AuthorizedOperatorEvent.OutputObject
    >;
    AuthorizedOperator: TypedContractEvent<
      AuthorizedOperatorEvent.InputTuple,
      AuthorizedOperatorEvent.OutputTuple,
      AuthorizedOperatorEvent.OutputObject
    >;

    "AuthorizedOperatorByPartition(bytes32,address,address)": TypedContractEvent<
      AuthorizedOperatorByPartitionEvent.InputTuple,
      AuthorizedOperatorByPartitionEvent.OutputTuple,
      AuthorizedOperatorByPartitionEvent.OutputObject
    >;
    AuthorizedOperatorByPartition: TypedContractEvent<
      AuthorizedOperatorByPartitionEvent.InputTuple,
      AuthorizedOperatorByPartitionEvent.OutputTuple,
      AuthorizedOperatorByPartitionEvent.OutputObject
    >;

    "ChangedPartition(bytes32,bytes32,uint256)": TypedContractEvent<
      ChangedPartitionEvent.InputTuple,
      ChangedPartitionEvent.OutputTuple,
      ChangedPartitionEvent.OutputObject
    >;
    ChangedPartition: TypedContractEvent<
      ChangedPartitionEvent.InputTuple,
      ChangedPartitionEvent.OutputTuple,
      ChangedPartitionEvent.OutputObject
    >;

    "DocumentRemoved(bytes32,string,bytes32)": TypedContractEvent<
      DocumentRemovedEvent.InputTuple,
      DocumentRemovedEvent.OutputTuple,
      DocumentRemovedEvent.OutputObject
    >;
    DocumentRemoved: TypedContractEvent<
      DocumentRemovedEvent.InputTuple,
      DocumentRemovedEvent.OutputTuple,
      DocumentRemovedEvent.OutputObject
    >;

    "DocumentUpdated(bytes32,string,bytes32)": TypedContractEvent<
      DocumentUpdatedEvent.InputTuple,
      DocumentUpdatedEvent.OutputTuple,
      DocumentUpdatedEvent.OutputObject
    >;
    DocumentUpdated: TypedContractEvent<
      DocumentUpdatedEvent.InputTuple,
      DocumentUpdatedEvent.OutputTuple,
      DocumentUpdatedEvent.OutputObject
    >;

    "Issued(address,address,uint256,bytes)": TypedContractEvent<
      IssuedEvent.InputTuple,
      IssuedEvent.OutputTuple,
      IssuedEvent.OutputObject
    >;
    Issued: TypedContractEvent<
      IssuedEvent.InputTuple,
      IssuedEvent.OutputTuple,
      IssuedEvent.OutputObject
    >;

    "IssuedByPartition(bytes32,address,address,uint256,bytes,bytes)": TypedContractEvent<
      IssuedByPartitionEvent.InputTuple,
      IssuedByPartitionEvent.OutputTuple,
      IssuedByPartitionEvent.OutputObject
    >;
    IssuedByPartition: TypedContractEvent<
      IssuedByPartitionEvent.InputTuple,
      IssuedByPartitionEvent.OutputTuple,
      IssuedByPartitionEvent.OutputObject
    >;

    "MinterAdded(address)": TypedContractEvent<
      MinterAddedEvent.InputTuple,
      MinterAddedEvent.OutputTuple,
      MinterAddedEvent.OutputObject
    >;
    MinterAdded: TypedContractEvent<
      MinterAddedEvent.InputTuple,
      MinterAddedEvent.OutputTuple,
      MinterAddedEvent.OutputObject
    >;

    "MinterRemoved(address)": TypedContractEvent<
      MinterRemovedEvent.InputTuple,
      MinterRemovedEvent.OutputTuple,
      MinterRemovedEvent.OutputObject
    >;
    MinterRemoved: TypedContractEvent<
      MinterRemovedEvent.InputTuple,
      MinterRemovedEvent.OutputTuple,
      MinterRemovedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Redeemed(address,address,uint256,bytes)": TypedContractEvent<
      RedeemedEvent.InputTuple,
      RedeemedEvent.OutputTuple,
      RedeemedEvent.OutputObject
    >;
    Redeemed: TypedContractEvent<
      RedeemedEvent.InputTuple,
      RedeemedEvent.OutputTuple,
      RedeemedEvent.OutputObject
    >;

    "RedeemedByPartition(bytes32,address,address,uint256,bytes)": TypedContractEvent<
      RedeemedByPartitionEvent.InputTuple,
      RedeemedByPartitionEvent.OutputTuple,
      RedeemedByPartitionEvent.OutputObject
    >;
    RedeemedByPartition: TypedContractEvent<
      RedeemedByPartitionEvent.InputTuple,
      RedeemedByPartitionEvent.OutputTuple,
      RedeemedByPartitionEvent.OutputObject
    >;

    "RevokedOperator(address,address)": TypedContractEvent<
      RevokedOperatorEvent.InputTuple,
      RevokedOperatorEvent.OutputTuple,
      RevokedOperatorEvent.OutputObject
    >;
    RevokedOperator: TypedContractEvent<
      RevokedOperatorEvent.InputTuple,
      RevokedOperatorEvent.OutputTuple,
      RevokedOperatorEvent.OutputObject
    >;

    "RevokedOperatorByPartition(bytes32,address,address)": TypedContractEvent<
      RevokedOperatorByPartitionEvent.InputTuple,
      RevokedOperatorByPartitionEvent.OutputTuple,
      RevokedOperatorByPartitionEvent.OutputObject
    >;
    RevokedOperatorByPartition: TypedContractEvent<
      RevokedOperatorByPartitionEvent.InputTuple,
      RevokedOperatorByPartitionEvent.OutputTuple,
      RevokedOperatorByPartitionEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TransferByPartition(bytes32,address,address,address,uint256,bytes,bytes)": TypedContractEvent<
      TransferByPartitionEvent.InputTuple,
      TransferByPartitionEvent.OutputTuple,
      TransferByPartitionEvent.OutputObject
    >;
    TransferByPartition: TypedContractEvent<
      TransferByPartitionEvent.InputTuple,
      TransferByPartitionEvent.OutputTuple,
      TransferByPartitionEvent.OutputObject
    >;
  };
}
