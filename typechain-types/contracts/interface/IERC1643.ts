/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IERC1643Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAllDocuments"
      | "getDocument"
      | "removeDocument"
      | "setDocument"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DocumentRemoved" | "DocumentUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getAllDocuments",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDocument",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDocument",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDocument",
    values: [BytesLike, string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllDocuments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDocument",
    data: BytesLike
  ): Result;
}

export namespace DocumentRemovedEvent {
  export type InputTuple = [
    name: BytesLike,
    uri: string,
    documentHash: BytesLike
  ];
  export type OutputTuple = [name: string, uri: string, documentHash: string];
  export interface OutputObject {
    name: string;
    uri: string;
    documentHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DocumentUpdatedEvent {
  export type InputTuple = [
    name: BytesLike,
    uri: string,
    documentHash: BytesLike
  ];
  export type OutputTuple = [name: string, uri: string, documentHash: string];
  export interface OutputObject {
    name: string;
    uri: string;
    documentHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IERC1643 extends BaseContract {
  connect(runner?: ContractRunner | null): IERC1643;
  waitForDeployment(): Promise<this>;

  interface: IERC1643Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAllDocuments: TypedContractMethod<[], [string[]], "view">;

  getDocument: TypedContractMethod<
    [_name: BytesLike],
    [[string, string, bigint]],
    "view"
  >;

  removeDocument: TypedContractMethod<[_name: BytesLike], [void], "nonpayable">;

  setDocument: TypedContractMethod<
    [_name: BytesLike, _uri: string, _documentHash: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAllDocuments"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getDocument"
  ): TypedContractMethod<
    [_name: BytesLike],
    [[string, string, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeDocument"
  ): TypedContractMethod<[_name: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDocument"
  ): TypedContractMethod<
    [_name: BytesLike, _uri: string, _documentHash: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DocumentRemoved"
  ): TypedContractEvent<
    DocumentRemovedEvent.InputTuple,
    DocumentRemovedEvent.OutputTuple,
    DocumentRemovedEvent.OutputObject
  >;
  getEvent(
    key: "DocumentUpdated"
  ): TypedContractEvent<
    DocumentUpdatedEvent.InputTuple,
    DocumentUpdatedEvent.OutputTuple,
    DocumentUpdatedEvent.OutputObject
  >;

  filters: {
    "DocumentRemoved(bytes32,string,bytes32)": TypedContractEvent<
      DocumentRemovedEvent.InputTuple,
      DocumentRemovedEvent.OutputTuple,
      DocumentRemovedEvent.OutputObject
    >;
    DocumentRemoved: TypedContractEvent<
      DocumentRemovedEvent.InputTuple,
      DocumentRemovedEvent.OutputTuple,
      DocumentRemovedEvent.OutputObject
    >;

    "DocumentUpdated(bytes32,string,bytes32)": TypedContractEvent<
      DocumentUpdatedEvent.InputTuple,
      DocumentUpdatedEvent.OutputTuple,
      DocumentUpdatedEvent.OutputObject
    >;
    DocumentUpdated: TypedContractEvent<
      DocumentUpdatedEvent.InputTuple,
      DocumentUpdatedEvent.OutputTuple,
      DocumentUpdatedEvent.OutputObject
    >;
  };
}
