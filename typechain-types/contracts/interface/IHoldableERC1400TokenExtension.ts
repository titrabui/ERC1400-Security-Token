/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IHoldableERC1400TokenExtensionInterface extends Interface {
  getFunction(
    nameOrSignature: "executeHold" | "retrieveHoldData"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "executeHold",
    values: [AddressLike, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveHoldData",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeHold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveHoldData",
    data: BytesLike
  ): Result;
}

export interface IHoldableERC1400TokenExtension extends BaseContract {
  connect(runner?: ContractRunner | null): IHoldableERC1400TokenExtension;
  waitForDeployment(): Promise<this>;

  interface: IHoldableERC1400TokenExtensionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  executeHold: TypedContractMethod<
    [
      token: AddressLike,
      holdId: BytesLike,
      value: BigNumberish,
      lockPreimage: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  retrieveHoldData: TypedContractMethod<
    [token: AddressLike, holdId: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        string,
        bigint
      ] & {
        partition: string;
        sender: string;
        recipient: string;
        notary: string;
        value: bigint;
        expiration: bigint;
        secretHash: string;
        secret: string;
        status: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "executeHold"
  ): TypedContractMethod<
    [
      token: AddressLike,
      holdId: BytesLike,
      value: BigNumberish,
      lockPreimage: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "retrieveHoldData"
  ): TypedContractMethod<
    [token: AddressLike, holdId: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        string,
        bigint
      ] & {
        partition: string;
        sender: string;
        recipient: string;
        notary: string;
        value: bigint;
        expiration: bigint;
        secretHash: string;
        secret: string;
        status: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
