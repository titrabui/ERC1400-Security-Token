/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  ERC1400TokensChecker,
  ERC1400TokensCheckerInterface,
} from "../../../../../contracts/extensions/tokenExtensions/ERC1400TokensChecker.sol/ERC1400TokensChecker";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "interfaceHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "canImplementInterfaceForAddress",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "partition",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "operatorData",
        type: "bytes",
      },
    ],
    name: "canTransferByPartition",
    outputs: [
      {
        internalType: "bytes1",
        name: "",
        type: "bytes1",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060408051808201909152601481527f45524331343030546f6b656e73436865636b65720000000000000000000000006020820152604b90604f565b60c7565b60016000808360405160200160639190609a565b60408051808303601f19018152918152815160209283012083529082019290925201600020805460ff191691151591909117905550565b6000825160005b8181101560b9576020818601810151858301520160a1565b506000920191825250919050565b610c27806100d66000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063249cb3fa1461003b578063c71ff52714610061575b600080fd5b61004e610049366004610830565b61009a565b6040519081526020015b60405180910390f35b61007461006f3660046108a9565b6100fb565b604080516001600160f81b03199094168452602084019290925290820152606001610058565b60008281526020819052604081205460ff16156100f15760405173455243313832305f4143434550545f4d4147494360601b60208201526034016040516020818303038152906040528051906020012090506100f5565b5060005b92915050565b60008060006101ce8e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508d8d8d8d8d8d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506101e592505050565b9250925092509b509b509b98505050505050505050565b6040516336bbe56b60e11b8152600481018890526001600160a01b03808816602483015286166044820152600090819081903390636d77cad690606401602060405180830381865afa15801561023f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102639190610998565b6102795750600b60fb1b91506000905088610724565b6040516370a0823160e01b81526001600160a01b0389166004820152869033906370a0823190602401602060405180830381865afa1580156102bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e391906109ba565b108061035d57506040516330e8280360e01b8152600481018b90526001600160a01b0389166024820152869033906330e8280390604401602060405180830381865afa158015610337573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035b91906109ba565b105b156103745750602960f91b91506000905088610724565b6001600160a01b0387166103945750605760f81b91506000905088610724565b60006103cb896040518060400160405280601381526020017222a921989a18182a37b5b2b739a9b2b73232b960691b815250610732565b90506001600160a01b0381161580159061045d5750604051637451263560e11b81526001600160a01b0382169063e8a24c6a9061041a908f908f908f908f908f908f908f908f90600401610a23565b602060405180830381865afa158015610437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045b9190610998565b155b156104765750602b60f91b925060009150899050610724565b6104ae8860405180604001604052806016815260200175115490cc4d0c0c151bdad95b9cd49958da5c1a595b9d60521b815250610732565b90506001600160a01b03811615801590610540575060405163f55886df60e01b81526001600160a01b0382169063f55886df906104fd908f908f908f908f908f908f908f908f90600401610a23565b602060405180830381865afa15801561051a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053e9190610998565b155b156105595750605760f81b925060009150899050610724565b610591336040518060400160405280601681526020017522a921989a18182a37b5b2b739ab30b634b230ba37b960511b815250610732565b6040805161012081018252338152602081018f90529081018d90526001600160a01b038c811660608301528b811660808301528a811660a083015260c082018a905260e0820189905261010082018890529192509082161580159061066057506040516398a53ef560e01b81526001600160a01b038316906398a53ef59061061d908490600401610a9a565b602060405180830381865afa15801561063a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065e9190610998565b155b1561067b5750601560fa1b9350600092508a91506107249050565b6000336001600160a01b031663556f0dc76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106df91906109ba565b9050886106f6826106f083826107e9565b906107fc565b146107125750600560fc1b9450600093508b9250610724915050565b50605160f81b9450600093508b925050505b985098509895505050505050565b600080826040516020016107469190610b71565b60408051808303601f1901815290829052805160209091012063555ddc6560e11b82526001600160a01b0386166004830152602482018190529150731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa1580156107bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e19190610b8d565b949350505050565b60006107f58284610baa565b9392505050565b60006107f58284610bcc565b6001600160a01b038116811461081d57600080fd5b50565b803561082b81610808565b919050565b6000806040838503121561084357600080fd5b82359150602083013561085581610808565b809150509250929050565b60008083601f84011261087257600080fd5b50813567ffffffffffffffff81111561088a57600080fd5b6020830191508360208285010111156108a257600080fd5b9250929050565b60008060008060008060008060008060006101008c8e0312156108cb57600080fd5b8b3567ffffffffffffffff8111156108e257600080fd5b6108ee8e828f01610860565b909c509a505060208c0135985061090760408d01610820565b975061091560608d01610820565b965061092360808d01610820565b955060a08c0135945060c08c013567ffffffffffffffff81111561094657600080fd5b6109528e828f01610860565b90955093505060e08c013567ffffffffffffffff81111561097257600080fd5b61097e8e828f01610860565b915080935050809150509295989b509295989b9093969950565b6000602082840312156109aa57600080fd5b815180151581146107f557600080fd5b6000602082840312156109cc57600080fd5b5051919050565b60005b838110156109ee5781810151838201526020016109d6565b50506000910152565b60008151808452610a0f8160208601602086016109d3565b601f01601f19169290920160200192915050565b61010081526000610a3861010083018b6109f7565b602083018a90526001600160a01b03898116604085015288811660608501528716608084015260a0830186905282810360c0840152610a7781866109f7565b905082810360e0840152610a8b81856109f7565b9b9a5050505050505050505050565b60208152610ab46020820183516001600160a01b03169052565b600060208301516101206040840152610ad16101408401826109f7565b9050604084015160608401526060840151610af760808501826001600160a01b03169052565b5060808401516001600160a01b03811660a08501525060a08401516001600160a01b03811660c08501525060c084015160e084015260e0840151601f1984830301610100850152610b4882826109f7565b915050610100840151601f1984830301610120850152610b6882826109f7565b95945050505050565b60008251610b838184602087016109d3565b9190910192915050565b600060208284031215610b9f57600080fd5b81516107f581610808565b600082610bc757634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176100f557634e487b7160e01b600052601160045260246000fdfea264697066735822122006aeb69d5af172548a943d53ff83196068751815403f0b8456d8c9c3fefa3c7664736f6c634300081c0033";

type ERC1400TokensCheckerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC1400TokensCheckerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC1400TokensChecker__factory extends ContractFactory {
  constructor(...args: ERC1400TokensCheckerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ERC1400TokensChecker & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): ERC1400TokensChecker__factory {
    return super.connect(runner) as ERC1400TokensChecker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC1400TokensCheckerInterface {
    return new Interface(_abi) as ERC1400TokensCheckerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ERC1400TokensChecker {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ERC1400TokensChecker;
  }
}
