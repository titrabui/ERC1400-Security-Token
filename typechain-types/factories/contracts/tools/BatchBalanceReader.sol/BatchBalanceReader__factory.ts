/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  BatchBalanceReader,
  BatchBalanceReaderInterface,
} from "../../../../contracts/tools/BatchBalanceReader.sol/BatchBalanceReader";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokenHolders",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "tokenAddresses",
        type: "address[]",
      },
    ],
    name: "balancesOf",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokenHolders",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "tokenAddresses",
        type: "address[]",
      },
      {
        internalType: "bytes32[]",
        name: "partitions",
        type: "bytes32[]",
      },
    ],
    name: "balancesOfByPartition",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "interfaceHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "canImplementInterfaceForAddress",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokenAddresses",
        type: "address[]",
      },
    ],
    name: "totalSupplies",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "partitions",
        type: "bytes32[]",
      },
      {
        internalType: "address[]",
        name: "tokenAddresses",
        type: "address[]",
      },
    ],
    name: "totalSuppliesByPartition",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506040805180820190915260128152712130ba31b42130b630b731b2a932b0b232b960711b60208201526040906044565b60bc565b60016000808360405160200160589190608f565b60408051808303601f19018152918152815160209283012083529082019290925201600020805460ff191691151591909117905550565b6000825160005b8181101560ae57602081860181015185830152016096565b506000920191825250919050565b610a0b806100cb6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631929e0091461005c578063249cb3fa14610085578063a09640ec146100a6578063dd2e4bb5146100b9578063feeef1e6146100cc575b600080fd5b61006f61006a36600461074a565b6100df565b60405161007c91906107bb565b60405180910390f35b61009861009336600461081a565b610246565b60405190815260200161007c565b61006f6100b436600461074a565b6102a7565b61006f6100c7366004610846565b610419565b61006f6100da366004610888565b610522565b606060006100ed8386610944565b67ffffffffffffffff8111156101055761010561095b565b60405190808252806020026020018201604052801561012e578160200160208202803683370190505b5090506000805b8481101561023a5760005b8781101561023157806101538984610944565b61015d9190610971565b925086868381811061017157610171610984565b9050602002016020810190610186919061099a565b6001600160a01b031663a26734dc8a8a848181106101a6576101a6610984565b905060200201356040518263ffffffff1660e01b81526004016101cb91815260200190565b602060405180830381865afa1580156101e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020c91906109bc565b84848151811061021e5761021e610984565b6020908102919091010152600101610140565b50600101610135565b50909695505050505050565b60008281526020819052604081205460ff161561029d5760405173455243313832305f4143434550545f4d4147494360601b60208201526034016040516020818303038152906040528051906020012090506102a1565b5060005b92915050565b606060006102b58386610944565b67ffffffffffffffff8111156102cd576102cd61095b565b6040519080825280602002602001820160405280156102f6578160200160208202803683370190505b5090506000805b8681101561023a5760005b85811015610410578061031b8784610944565b6103259190610971565b925086868281811061033957610339610984565b905060200201602081019061034e919061099a565b6001600160a01b03166370a082318a8a8581811061036e5761036e610984565b9050602002016020810190610383919061099a565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156103c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103eb91906109bc565b8484815181106103fd576103fd610984565b6020908102919091010152600101610308565b506001016102fd565b606060008267ffffffffffffffff8111156104365761043661095b565b60405190808252806020026020018201604052801561045f578160200160208202803683370190505b50905060005b8381101561051a5784848281811061047f5761047f610984565b9050602002016020810190610494919061099a565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f591906109bc565b82828151811061050757610507610984565b6020908102919091010152600101610465565b509392505050565b60606000866105318487610944565b61053b9190610944565b67ffffffffffffffff8111156105535761055361095b565b60405190808252806020026020018201604052801561057c578160200160208202803683370190505b5090506000805b888110156106f05760005b878110156106e75760005b868110156106de57806105ac8884610944565b6105b6898c610944565b6105c09086610944565b6105ca9190610971565b6105d49190610971565b93508989838181106105e8576105e8610984565b90506020020160208101906105fd919061099a565b6001600160a01b03166330e8280389898481811061061d5761061d610984565b905060200201358e8e8781811061063657610636610984565b905060200201602081019061064b919061099a565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa158015610695573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b991906109bc565b8585815181106106cb576106cb610984565b6020908102919091010152600101610599565b5060010161058e565b50600101610583565b509098975050505050505050565b60008083601f84011261071057600080fd5b50813567ffffffffffffffff81111561072857600080fd5b6020830191508360208260051b850101111561074357600080fd5b9250929050565b6000806000806040858703121561076057600080fd5b843567ffffffffffffffff81111561077757600080fd5b610783878288016106fe565b909550935050602085013567ffffffffffffffff8111156107a357600080fd5b6107af878288016106fe565b95989497509550505050565b602080825282518282018190526000918401906040840190835b818110156107f35783518352602093840193909201916001016107d5565b509095945050505050565b80356001600160a01b038116811461081557600080fd5b919050565b6000806040838503121561082d57600080fd5b8235915061083d602084016107fe565b90509250929050565b6000806020838503121561085957600080fd5b823567ffffffffffffffff81111561087057600080fd5b61087c858286016106fe565b90969095509350505050565b600080600080600080606087890312156108a157600080fd5b863567ffffffffffffffff8111156108b857600080fd5b6108c489828a016106fe565b909750955050602087013567ffffffffffffffff8111156108e457600080fd5b6108f089828a016106fe565b909550935050604087013567ffffffffffffffff81111561091057600080fd5b61091c89828a016106fe565b979a9699509497509295939492505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176102a1576102a161092e565b634e487b7160e01b600052604160045260246000fd5b808201808211156102a1576102a161092e565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156109ac57600080fd5b6109b5826107fe565b9392505050565b6000602082840312156109ce57600080fd5b505191905056fea2646970667358221220e5e4ecfb522c7c47d62b35f04cad041ae09b3be3159a4c78a3c66db8a4b57d9764736f6c634300081c0033";

type BatchBalanceReaderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BatchBalanceReaderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BatchBalanceReader__factory extends ContractFactory {
  constructor(...args: BatchBalanceReaderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      BatchBalanceReader & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): BatchBalanceReader__factory {
    return super.connect(runner) as BatchBalanceReader__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BatchBalanceReaderInterface {
    return new Interface(_abi) as BatchBalanceReaderInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BatchBalanceReader {
    return new Contract(address, _abi, runner) as unknown as BatchBalanceReader;
  }
}
