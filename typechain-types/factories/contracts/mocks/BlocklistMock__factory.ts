/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  BlocklistMock,
  BlocklistMockInterface,
} from "../../../contracts/mocks/BlocklistMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "BlocklistAdminAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "BlocklistAdminRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "BlocklistedAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "BlocklistedRemoved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "addBlocklistAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "addBlocklisted",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isBlocklistAdmin",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isBlocklisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "bool",
        name: "mockActivated",
        type: "bool",
      },
    ],
    name: "mockFunction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "removeBlocklistAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "removeBlocklisted",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "renounceBlocklistAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161081c38038061081c83398101604081905261002f916101a9565b610039813361003f565b506101d9565b6001600160a01b038216600090815260208190526040902061006190826100a5565b806001600160a01b0316826001600160a01b03167fc52e3252244a1a2a298f7b5a9f8e964ab8737811b620a1426c0b95e3037bba9e60405160405180910390a35050565b6100af8282610126565b156101015760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650060448201526064015b60405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006001600160a01b0382166101895760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b60648201526084016100f8565b506001600160a01b03166000908152602091909152604090205460ff1690565b6000602082840312156101bb57600080fd5b81516001600160a01b03811681146101d257600080fd5b9392505050565b610634806101e86000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a4aa023f1161005b578063a4aa023f146100ef578063c428b20214610102578063e323e67114610115578063ebf42f771461012857600080fd5b80632c55b05f1461008d5780636c41d4ea146100a25780639bd483ec146100b5578063a28e7c02146100c8575b600080fd5b6100a061009b366004610574565b61013b565b005b6100a06100b03660046105a7565b61015e565b6100a06100c3366004610574565b610188565b6100db6100d6366004610574565b6101a6565b604051901515815260200160405180910390f35b6100db6100fd366004610574565b6101cf565b6100a0610110366004610574565b6101f1565b6100a06101233660046105e3565b61020f565b6100a0610136366004610574565b61021c565b8161014681336101a6565b61014f57600080fd5b610159838361023a565b505050565b8161016981336101cf565b1561017357600080fd5b506002805460ff191691151591909117905550565b8161019381336101a6565b61019c57600080fd5b61015983836102a0565b6001600160a01b03821660009081526020819052604081206101c89083610306565b9392505050565b6001600160a01b03821660009081526001602052604081206101c89083610306565b816101fc81336101a6565b61020557600080fd5b610159838361038e565b61021981336103f4565b50565b8161022781336101a6565b61023057600080fd5b61015983836103f4565b6001600160a01b038216600090815260016020526040902061025c908261045a565b806001600160a01b0316826001600160a01b03167f4eef79dfdff8d6b9485c6a01d5caac6413488fc1036c03867dbf75558a3b3a3660405160405180910390a35050565b6001600160a01b03821660009081526001602052604090206102c290826104d6565b806001600160a01b0316826001600160a01b03167fd3e42d12ae7dae2e960401c63b158173cc9987f9ee213374eff6471eed4062e360405160405180910390a35050565b60006001600160a01b03821661036e5760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b60648201526084015b60405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b6001600160a01b03821660009081526020819052604090206103b0908261045a565b806001600160a01b0316826001600160a01b03167fc52e3252244a1a2a298f7b5a9f8e964ab8737811b620a1426c0b95e3037bba9e60405160405180910390a35050565b6001600160a01b038216600090815260208190526040902061041690826104d6565b806001600160a01b0316826001600160a01b03167f2e4e5dc902da1dd9425aa2acf081cc51d589443784af4c3fd7d5fe60d5915cd060405160405180910390a35050565b6104648282610306565b156104b15760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006044820152606401610365565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b6104e08282610306565b6105365760405162461bcd60e51b815260206004820152602160248201527f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c6044820152606560f81b6064820152608401610365565b6001600160a01b0316600090815260209190915260409020805460ff19169055565b80356001600160a01b038116811461056f57600080fd5b919050565b6000806040838503121561058757600080fd5b61059083610558565b915061059e60208401610558565b90509250929050565b600080604083850312156105ba57600080fd5b6105c383610558565b9150602083013580151581146105d857600080fd5b809150509250929050565b6000602082840312156105f557600080fd5b6101c88261055856fea26469706673582212203fcdd78da4cc11e5184634a99280341d47e4026f52ad190ba8b5928435d0837764736f6c634300081c0033";

type BlocklistMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BlocklistMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BlocklistMock__factory extends ContractFactory {
  constructor(...args: BlocklistMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    token: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(token, overrides || {});
  }
  override deploy(
    token: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(token, overrides || {}) as Promise<
      BlocklistMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): BlocklistMock__factory {
    return super.connect(runner) as BlocklistMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BlocklistMockInterface {
    return new Interface(_abi) as BlocklistMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BlocklistMock {
    return new Contract(address, _abi, runner) as unknown as BlocklistMock;
  }
}
