/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  CertificateSignerMock,
  CertificateSignerMockInterface,
} from "../../../contracts/mocks/CertificateSignerMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "CertificateSignerAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "CertificateSignerRemoved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "addCertificateSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isCertificateSigner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "removeCertificateSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "renounceCertificateSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161060038038061060083398101604081905261002f916101a9565b610039813361003f565b506101d9565b6001600160a01b038216600090815260208190526040902061006190826100a5565b806001600160a01b0316826001600160a01b03167f9a01aee9f656aba8760d771cf21d803168ecc664c252c9374f4a3252481fbf3560405160405180910390a35050565b6100af8282610126565b156101015760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650060448201526064015b60405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006001600160a01b0382166101895760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b60648201526084016100f8565b506001600160a01b03166000908152602091909152604090205460ff1690565b6000602082840312156101bb57600080fd5b81516001600160a01b03811681146101d257600080fd5b9392505050565b610418806101e86000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80633bddaf8f146100515780639e59ceba14610066578063c69664bb1461008d578063e81ea541146100a0575b600080fd5b61006461005f366004610394565b6100b3565b005b6100796100743660046103af565b6100c0565b604051901515815260200160405180910390f35b61006461009b3660046103af565b6100e9565b6100646100ae3660046103af565b61010c565b6100bd8133610126565b50565b6001600160a01b03821660009081526020819052604081206100e2908361018c565b9392505050565b816100f481336100c0565b6100fd57600080fd5b6101078383610214565b505050565b8161011781336100c0565b61012057600080fd5b61010783835b6001600160a01b0382166000908152602081905260409020610148908261027a565b806001600160a01b0316826001600160a01b03167f795a3a12ab7aa35ee8d4681ead2986eae8de69f5491d9dccfeca0442f644db8160405160405180910390a35050565b60006001600160a01b0382166101f45760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b60648201526084015b60405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b6001600160a01b038216600090815260208190526040902061023690826102fc565b806001600160a01b0316826001600160a01b03167f9a01aee9f656aba8760d771cf21d803168ecc664c252c9374f4a3252481fbf3560405160405180910390a35050565b610284828261018c565b6102da5760405162461bcd60e51b815260206004820152602160248201527f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c6044820152606560f81b60648201526084016101eb565b6001600160a01b0316600090815260209190915260409020805460ff19169055565b610306828261018c565b156103535760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650060448201526064016101eb565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b80356001600160a01b038116811461038f57600080fd5b919050565b6000602082840312156103a657600080fd5b6100e282610378565b600080604083850312156103c257600080fd5b6103cb83610378565b91506103d960208401610378565b9050925092905056fea26469706673582212208a41ed93c6e6ba43c1314a9e3c1b8764396fbe3a94a66199f636bd4f49ada0db64736f6c634300081c0033";

type CertificateSignerMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CertificateSignerMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CertificateSignerMock__factory extends ContractFactory {
  constructor(...args: CertificateSignerMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    token: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(token, overrides || {});
  }
  override deploy(
    token: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(token, overrides || {}) as Promise<
      CertificateSignerMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): CertificateSignerMock__factory {
    return super.connect(runner) as CertificateSignerMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CertificateSignerMockInterface {
    return new Interface(_abi) as CertificateSignerMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CertificateSignerMock {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as CertificateSignerMock;
  }
}
