/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "AccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerable__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "IAccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC4906",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC4906__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "ERC20Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Pausable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Burnable__factory>;
    getContractFactory(
      name: "ERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Enumerable__factory>;
    getContractFactory(
      name: "ERC721Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Pausable__factory>;
    getContractFactory(
      name: "ERC721URIStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721URIStorage__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC1820Registry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1820Registry__factory>;
    getContractFactory(
      name: "ERC1400HoldableCertificateToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1400HoldableCertificateToken__factory>;
    getContractFactory(
      name: "Extension",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Extension__factory>;
    getContractFactory(
      name: "ERC1400",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1400__factory>;
    getContractFactory(
      name: "ERC1400TokensChecker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1400TokensChecker__factory>;
    getContractFactory(
      name: "IERC1400Extended",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1400Extended__factory>;
    getContractFactory(
      name: "ERC1400TokensValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1400TokensValidator__factory>;
    getContractFactory(
      name: "IMinterRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMinterRole__factory>;
    getContractFactory(
      name: "IERC1400TokensChecker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1400TokensChecker__factory>;
    getContractFactory(
      name: "IERC1400TokensValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1400TokensValidator__factory>;
    getContractFactory(
      name: "IERC1400TokensRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1400TokensRecipient__factory>;
    getContractFactory(
      name: "IERC1400TokensSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1400TokensSender__factory>;
    getContractFactory(
      name: "IERC1400",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1400__factory>;
    getContractFactory(
      name: "ERC1820Implementer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1820Implementer__factory>;
    getContractFactory(
      name: "IERC1643",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1643__factory>;
    getContractFactory(
      name: "IERC20HoldableToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20HoldableToken__factory>;
    getContractFactory(
      name: "IHoldableERC1400TokenExtension",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHoldableERC1400TokenExtension__factory>;
    getContractFactory(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrations__factory>;
    getContractFactory(
      name: "AllowlistMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AllowlistMock__factory>;
    getContractFactory(
      name: "BlocklistMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlocklistMock__factory>;
    getContractFactory(
      name: "CertificateSignerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CertificateSignerMock__factory>;
    getContractFactory(
      name: "ClockMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClockMock__factory>;
    getContractFactory(
      name: "ERC1400TokensRecipientMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1400TokensRecipientMock__factory>;
    getContractFactory(
      name: "ERC1400TokensSenderMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1400TokensSenderMock__factory>;
    getContractFactory(
      name: "ERC1400TokensValidatorMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1400TokensValidatorMock__factory>;
    getContractFactory(
      name: "IMinterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMinterMock__factory>;
    getContractFactory(
      name: "ExtensionMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExtensionMock__factory>;
    getContractFactory(
      name: "FakeERC1400Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeERC1400Mock__factory>;
    getContractFactory(
      name: "MinterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MinterMock__factory>;
    getContractFactory(
      name: "PauserMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PauserMock__factory>;
    getContractFactory(
      name: "AllowlistAdminRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AllowlistAdminRole__factory>;
    getContractFactory(
      name: "AllowlistedRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AllowlistedRole__factory>;
    getContractFactory(
      name: "BlocklistAdminRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlocklistAdminRole__factory>;
    getContractFactory(
      name: "BlocklistedRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlocklistedRole__factory>;
    getContractFactory(
      name: "CertificateSignerRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CertificateSignerRole__factory>;
    getContractFactory(
      name: "MinterRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MinterRole__factory>;
    getContractFactory(
      name: "PauserRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PauserRole__factory>;
    getContractFactory(
      name: "ERC1400HoldableToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1400HoldableToken__factory>;
    getContractFactory(
      name: "Extension",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Extension__factory>;
    getContractFactory(
      name: "ERC20HoldableToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20HoldableToken__factory>;
    getContractFactory(
      name: "ERC20Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Token__factory>;
    getContractFactory(
      name: "ERC721Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Token__factory>;
    getContractFactory(
      name: "BatchBalanceReader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BatchBalanceReader__factory>;
    getContractFactory(
      name: "IERC1400Extended",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1400Extended__factory>;
    getContractFactory(
      name: "BatchReader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BatchReader__factory>;
    getContractFactory(
      name: "IERC1400Extended",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1400Extended__factory>;
    getContractFactory(
      name: "IERC1400TokensValidatorExtended",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1400TokensValidatorExtended__factory>;
    getContractFactory(
      name: "BatchTokenIssuer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BatchTokenIssuer__factory>;
    getContractFactory(
      name: "IMinterRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMinterRole__factory>;
    getContractFactory(
      name: "DomainAware",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DomainAware__factory>;
    getContractFactory(
      name: "FundIssuer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FundIssuer__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "Swaps",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Swaps__factory>;

    getContractAt(
      name: "AccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "AccessControlEnumerable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerable>;
    getContractAt(
      name: "IAccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "IAccessControlEnumerable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerable>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC4906",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC4906>;
    getContractAt(
      name: "Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "ERC20Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Pausable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721Burnable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Burnable>;
    getContractAt(
      name: "ERC721Enumerable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Enumerable>;
    getContractAt(
      name: "ERC721Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Pausable>;
    getContractAt(
      name: "ERC721URIStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721URIStorage>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IERC1820Registry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1820Registry>;
    getContractAt(
      name: "ERC1400HoldableCertificateToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1400HoldableCertificateToken>;
    getContractAt(
      name: "Extension",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Extension>;
    getContractAt(
      name: "ERC1400",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1400>;
    getContractAt(
      name: "ERC1400TokensChecker",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1400TokensChecker>;
    getContractAt(
      name: "IERC1400Extended",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1400Extended>;
    getContractAt(
      name: "ERC1400TokensValidator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1400TokensValidator>;
    getContractAt(
      name: "IMinterRole",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMinterRole>;
    getContractAt(
      name: "IERC1400TokensChecker",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1400TokensChecker>;
    getContractAt(
      name: "IERC1400TokensValidator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1400TokensValidator>;
    getContractAt(
      name: "IERC1400TokensRecipient",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1400TokensRecipient>;
    getContractAt(
      name: "IERC1400TokensSender",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1400TokensSender>;
    getContractAt(
      name: "IERC1400",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1400>;
    getContractAt(
      name: "ERC1820Implementer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1820Implementer>;
    getContractAt(
      name: "IERC1643",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1643>;
    getContractAt(
      name: "IERC20HoldableToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20HoldableToken>;
    getContractAt(
      name: "IHoldableERC1400TokenExtension",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IHoldableERC1400TokenExtension>;
    getContractAt(
      name: "Migrations",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Migrations>;
    getContractAt(
      name: "AllowlistMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AllowlistMock>;
    getContractAt(
      name: "BlocklistMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BlocklistMock>;
    getContractAt(
      name: "CertificateSignerMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CertificateSignerMock>;
    getContractAt(
      name: "ClockMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ClockMock>;
    getContractAt(
      name: "ERC1400TokensRecipientMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1400TokensRecipientMock>;
    getContractAt(
      name: "ERC1400TokensSenderMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1400TokensSenderMock>;
    getContractAt(
      name: "ERC1400TokensValidatorMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1400TokensValidatorMock>;
    getContractAt(
      name: "IMinterMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMinterMock>;
    getContractAt(
      name: "ExtensionMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ExtensionMock>;
    getContractAt(
      name: "FakeERC1400Mock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeERC1400Mock>;
    getContractAt(
      name: "MinterMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MinterMock>;
    getContractAt(
      name: "PauserMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PauserMock>;
    getContractAt(
      name: "AllowlistAdminRole",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AllowlistAdminRole>;
    getContractAt(
      name: "AllowlistedRole",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AllowlistedRole>;
    getContractAt(
      name: "BlocklistAdminRole",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BlocklistAdminRole>;
    getContractAt(
      name: "BlocklistedRole",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BlocklistedRole>;
    getContractAt(
      name: "CertificateSignerRole",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CertificateSignerRole>;
    getContractAt(
      name: "MinterRole",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MinterRole>;
    getContractAt(
      name: "PauserRole",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PauserRole>;
    getContractAt(
      name: "ERC1400HoldableToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1400HoldableToken>;
    getContractAt(
      name: "Extension",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Extension>;
    getContractAt(
      name: "ERC20HoldableToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20HoldableToken>;
    getContractAt(
      name: "ERC20Token",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Token>;
    getContractAt(
      name: "ERC721Token",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Token>;
    getContractAt(
      name: "BatchBalanceReader",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BatchBalanceReader>;
    getContractAt(
      name: "IERC1400Extended",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1400Extended>;
    getContractAt(
      name: "BatchReader",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BatchReader>;
    getContractAt(
      name: "IERC1400Extended",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1400Extended>;
    getContractAt(
      name: "IERC1400TokensValidatorExtended",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1400TokensValidatorExtended>;
    getContractAt(
      name: "BatchTokenIssuer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BatchTokenIssuer>;
    getContractAt(
      name: "IMinterRole",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMinterRole>;
    getContractAt(
      name: "DomainAware",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DomainAware>;
    getContractAt(
      name: "FundIssuer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FundIssuer>;
    getContractAt(
      name: "Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "Swaps",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Swaps>;

    deployContract(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "AccessControlEnumerable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlEnumerable>;
    deployContract(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "IAccessControlEnumerable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControlEnumerable>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC4906",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC4906>;
    deployContract(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Burnable>;
    deployContract(
      name: "ERC20Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Pausable>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721>;
    deployContract(
      name: "ERC721Burnable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Burnable>;
    deployContract(
      name: "ERC721Enumerable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Enumerable>;
    deployContract(
      name: "ERC721Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Pausable>;
    deployContract(
      name: "ERC721URIStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721URIStorage>;
    deployContract(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Enumerable>;
    deployContract(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Metadata>;
    deployContract(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Receiver>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "IERC1820Registry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1820Registry>;
    deployContract(
      name: "ERC1400HoldableCertificateToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1400HoldableCertificateToken>;
    deployContract(
      name: "Extension",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Extension>;
    deployContract(
      name: "ERC1400",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1400>;
    deployContract(
      name: "ERC1400TokensChecker",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1400TokensChecker>;
    deployContract(
      name: "IERC1400Extended",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1400Extended>;
    deployContract(
      name: "ERC1400TokensValidator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1400TokensValidator>;
    deployContract(
      name: "IMinterRole",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMinterRole>;
    deployContract(
      name: "IERC1400TokensChecker",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1400TokensChecker>;
    deployContract(
      name: "IERC1400TokensValidator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1400TokensValidator>;
    deployContract(
      name: "IERC1400TokensRecipient",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1400TokensRecipient>;
    deployContract(
      name: "IERC1400TokensSender",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1400TokensSender>;
    deployContract(
      name: "IERC1400",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1400>;
    deployContract(
      name: "ERC1820Implementer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1820Implementer>;
    deployContract(
      name: "IERC1643",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1643>;
    deployContract(
      name: "IERC20HoldableToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20HoldableToken>;
    deployContract(
      name: "IHoldableERC1400TokenExtension",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHoldableERC1400TokenExtension>;
    deployContract(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Migrations>;
    deployContract(
      name: "AllowlistMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AllowlistMock>;
    deployContract(
      name: "BlocklistMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BlocklistMock>;
    deployContract(
      name: "CertificateSignerMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CertificateSignerMock>;
    deployContract(
      name: "ClockMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClockMock>;
    deployContract(
      name: "ERC1400TokensRecipientMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1400TokensRecipientMock>;
    deployContract(
      name: "ERC1400TokensSenderMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1400TokensSenderMock>;
    deployContract(
      name: "ERC1400TokensValidatorMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1400TokensValidatorMock>;
    deployContract(
      name: "IMinterMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMinterMock>;
    deployContract(
      name: "ExtensionMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExtensionMock>;
    deployContract(
      name: "FakeERC1400Mock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FakeERC1400Mock>;
    deployContract(
      name: "MinterMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MinterMock>;
    deployContract(
      name: "PauserMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PauserMock>;
    deployContract(
      name: "AllowlistAdminRole",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AllowlistAdminRole>;
    deployContract(
      name: "AllowlistedRole",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AllowlistedRole>;
    deployContract(
      name: "BlocklistAdminRole",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BlocklistAdminRole>;
    deployContract(
      name: "BlocklistedRole",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BlocklistedRole>;
    deployContract(
      name: "CertificateSignerRole",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CertificateSignerRole>;
    deployContract(
      name: "MinterRole",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MinterRole>;
    deployContract(
      name: "PauserRole",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PauserRole>;
    deployContract(
      name: "ERC1400HoldableToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1400HoldableToken>;
    deployContract(
      name: "Extension",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Extension>;
    deployContract(
      name: "ERC20HoldableToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20HoldableToken>;
    deployContract(
      name: "ERC20Token",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Token>;
    deployContract(
      name: "ERC721Token",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Token>;
    deployContract(
      name: "BatchBalanceReader",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BatchBalanceReader>;
    deployContract(
      name: "IERC1400Extended",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1400Extended>;
    deployContract(
      name: "BatchReader",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BatchReader>;
    deployContract(
      name: "IERC1400Extended",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1400Extended>;
    deployContract(
      name: "IERC1400TokensValidatorExtended",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1400TokensValidatorExtended>;
    deployContract(
      name: "BatchTokenIssuer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BatchTokenIssuer>;
    deployContract(
      name: "IMinterRole",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMinterRole>;
    deployContract(
      name: "DomainAware",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DomainAware>;
    deployContract(
      name: "FundIssuer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FundIssuer>;
    deployContract(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "Swaps",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Swaps>;

    deployContract(
      name: "AccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "AccessControlEnumerable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlEnumerable>;
    deployContract(
      name: "IAccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "IAccessControlEnumerable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControlEnumerable>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC4906",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC4906>;
    deployContract(
      name: "Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Burnable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Burnable>;
    deployContract(
      name: "ERC20Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Pausable>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC721",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721>;
    deployContract(
      name: "ERC721Burnable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Burnable>;
    deployContract(
      name: "ERC721Enumerable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Enumerable>;
    deployContract(
      name: "ERC721Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Pausable>;
    deployContract(
      name: "ERC721URIStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721URIStorage>;
    deployContract(
      name: "IERC721Enumerable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Enumerable>;
    deployContract(
      name: "IERC721Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Metadata>;
    deployContract(
      name: "IERC721",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "IERC721Receiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Receiver>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "IERC1820Registry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1820Registry>;
    deployContract(
      name: "ERC1400HoldableCertificateToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1400HoldableCertificateToken>;
    deployContract(
      name: "Extension",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Extension>;
    deployContract(
      name: "ERC1400",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1400>;
    deployContract(
      name: "ERC1400TokensChecker",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1400TokensChecker>;
    deployContract(
      name: "IERC1400Extended",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1400Extended>;
    deployContract(
      name: "ERC1400TokensValidator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1400TokensValidator>;
    deployContract(
      name: "IMinterRole",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMinterRole>;
    deployContract(
      name: "IERC1400TokensChecker",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1400TokensChecker>;
    deployContract(
      name: "IERC1400TokensValidator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1400TokensValidator>;
    deployContract(
      name: "IERC1400TokensRecipient",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1400TokensRecipient>;
    deployContract(
      name: "IERC1400TokensSender",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1400TokensSender>;
    deployContract(
      name: "IERC1400",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1400>;
    deployContract(
      name: "ERC1820Implementer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1820Implementer>;
    deployContract(
      name: "IERC1643",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1643>;
    deployContract(
      name: "IERC20HoldableToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20HoldableToken>;
    deployContract(
      name: "IHoldableERC1400TokenExtension",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHoldableERC1400TokenExtension>;
    deployContract(
      name: "Migrations",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Migrations>;
    deployContract(
      name: "AllowlistMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AllowlistMock>;
    deployContract(
      name: "BlocklistMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BlocklistMock>;
    deployContract(
      name: "CertificateSignerMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CertificateSignerMock>;
    deployContract(
      name: "ClockMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClockMock>;
    deployContract(
      name: "ERC1400TokensRecipientMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1400TokensRecipientMock>;
    deployContract(
      name: "ERC1400TokensSenderMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1400TokensSenderMock>;
    deployContract(
      name: "ERC1400TokensValidatorMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1400TokensValidatorMock>;
    deployContract(
      name: "IMinterMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMinterMock>;
    deployContract(
      name: "ExtensionMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExtensionMock>;
    deployContract(
      name: "FakeERC1400Mock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FakeERC1400Mock>;
    deployContract(
      name: "MinterMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MinterMock>;
    deployContract(
      name: "PauserMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PauserMock>;
    deployContract(
      name: "AllowlistAdminRole",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AllowlistAdminRole>;
    deployContract(
      name: "AllowlistedRole",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AllowlistedRole>;
    deployContract(
      name: "BlocklistAdminRole",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BlocklistAdminRole>;
    deployContract(
      name: "BlocklistedRole",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BlocklistedRole>;
    deployContract(
      name: "CertificateSignerRole",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CertificateSignerRole>;
    deployContract(
      name: "MinterRole",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MinterRole>;
    deployContract(
      name: "PauserRole",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PauserRole>;
    deployContract(
      name: "ERC1400HoldableToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1400HoldableToken>;
    deployContract(
      name: "Extension",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Extension>;
    deployContract(
      name: "ERC20HoldableToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20HoldableToken>;
    deployContract(
      name: "ERC20Token",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Token>;
    deployContract(
      name: "ERC721Token",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Token>;
    deployContract(
      name: "BatchBalanceReader",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BatchBalanceReader>;
    deployContract(
      name: "IERC1400Extended",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1400Extended>;
    deployContract(
      name: "BatchReader",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BatchReader>;
    deployContract(
      name: "IERC1400Extended",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1400Extended>;
    deployContract(
      name: "IERC1400TokensValidatorExtended",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1400TokensValidatorExtended>;
    deployContract(
      name: "BatchTokenIssuer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BatchTokenIssuer>;
    deployContract(
      name: "IMinterRole",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMinterRole>;
    deployContract(
      name: "DomainAware",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DomainAware>;
    deployContract(
      name: "FundIssuer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FundIssuer>;
    deployContract(
      name: "Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "Swaps",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Swaps>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
